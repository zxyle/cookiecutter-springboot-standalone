# 合并项目变动文件到脚手架模板中

import os
import re

base_package = "{{ cookiecutter.basePackage }}"
# TODO 需修改脚手架模板位置
stage_dir = "..../cookiecutter-springboot-standalone"
package_path = base_package.replace(".", "/")
source_dir = os.path.dirname(os.path.abspath(__file__))
target_dir = os.path.join(stage_dir, "{% raw %}{{cookiecutter.artifact}}{% endraw %}")


def print_green(content):
    print(f'\033[1;32m{content}\033[0m')


def print_red(content):
    print(f'\033[1;31m{content}\033[0m')


def print_yellow(content):
    print(f'\033[1;33m{content}\033[0m')


def get_first_commit():
    cmd = "git log --pretty=format:%H | tail -n 1"
    output = os.popen(cmd).read()
    return output.strip()


def get_changed_files(_first_commit, last_commit):
    cmd = f"git diff {_first_commit} {last_commit}  --name-only"
    output = os.popen(cmd).read()
    _files = output.split("\n")
    return [file for file in _files if file]


def replace_content(input_content):
    # 替换掉包名
    after_replace_base_package = input_content.replace(base_package, "{% raw %}{{ cookiecutter.basePackage }}{% endraw %}")
    # 替换掉版本号、作者和生成日期
    after_replace_version = re.sub("And git commit hash is \w{40}.",
                                   "And git commit hash is {% raw %}{% gitcommit %}{% endraw %}.",
                                   after_replace_base_package)
    after_replace_author = re.sub(
        "// This project was generated by .* at \d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.",
        "// This project was generated by {% raw %}{{ cookiecutter.author_name }}{% endraw %} at {% raw %}{% now 'local', '%Y-%m-%d %X' %}{% endraw %}.",
        after_replace_version)
    return after_replace_author


def move_all_files(files):
    for line in files:
        filename = line.strip()
        source_file_abs_path = os.path.join(source_dir, filename)
        target_file_abs_path = os.path.join(target_dir,
                                            filename.replace(package_path, "{% raw %}{{ cookiecutter.package_path }}{% endraw %}"))

        if not os.path.exists(source_file_abs_path):
            print_yellow("file: " + filename + " is not existed.")

            if os.path.exists(target_file_abs_path):
                os.remove(target_file_abs_path)
                print_red("file: " + filename + " is deleted.")
            continue

        with open(os.path.join(source_dir, filename), "r") as source_file:
            # 创建目录
            if not os.path.exists(os.path.dirname(target_file_abs_path)):
                os.makedirs(os.path.dirname(target_file_abs_path))

            with open(target_file_abs_path, "w") as target_file:
                code = source_file.read()
                target_file.write(replace_content(code))

        print_green("file: " + filename + " is copied.")


if __name__ == '__main__':
    # 获取往前推一个版本的commit id
    first_commit = get_first_commit()
    print("first commit: " + first_commit)
    files = get_changed_files(first_commit, "HEAD")
    print(files)
    move_all_files(files)
    print("done.")
