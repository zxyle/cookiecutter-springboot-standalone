// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sample.controller;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

/**
 * 文件传输示例
 */
@Slf4j
@RestController
public class FileController {

    /**
     * 文件下载示例
     */
    @RequestMapping(value = "/download", method = RequestMethod.GET)
    public ResponseEntity<Object> downloadFile() throws IOException {
        String filename = "D:\\apache-tomcat-8.5.59.zip";
        File file = new File(filename);
        InputStreamResource resource = new InputStreamResource(Files.newInputStream(file.toPath()));
        HttpHeaders headers = new HttpHeaders();

        headers.add("Content-Disposition", String.format("attachment; filename=\"%s\"", file.getName()));
        headers.add("Cache-Control", "no-cache, no-store, must-revalidate");
        headers.add("Pragma", "no-cache");
        headers.add("Expires", "0");

        return ResponseEntity.ok().headers(headers).contentLength(
                file.length()).contentType(MediaType.parseMediaType("application/zip")).body(resource);
    }

    /**
     * 单文件上传
     */
    @PostMapping(value = "/upload1", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @ResponseBody
    public String upload1(@RequestParam("file") MultipartFile file) {
        if (file.isEmpty()) {
            return "上传失败, 请选择文件";
        }

        String fileName = file.getOriginalFilename();
        String contentType = file.getContentType();
        log.info("原始文件名是: {}, contentType: {}, 文件大小: {}B", fileName, contentType, file.getSize());

        String filePath = "D:/";
        File dest = new File(filePath + fileName);

        try {
            file.transferTo(dest);
            return "上传到: " + dest.getAbsolutePath();
        } catch (IOException e) {
            log.error("error: ", e);
        }
        return "上传失败";
    }

    /**
     * 处理多个文件上传
     */
    @PostMapping(value = "/upload2", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @ResponseBody
    public String upload2(MultipartFile[] files) {
        for (MultipartFile file : files) {
            String filename = file.getOriginalFilename();
            log.info("原始文件名是: {}, 文件大小: {}B", filename, file.getSize());
        }

        return "上传成功";
    }
}
