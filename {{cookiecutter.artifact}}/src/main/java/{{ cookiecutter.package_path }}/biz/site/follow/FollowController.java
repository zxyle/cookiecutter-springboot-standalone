// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// And git commit hash is {% gitcommit %}.

package {{ cookiecutter.basePackage }}.biz.site.follow;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import {{ cookiecutter.basePackage }}.biz.auth.user.User;
import {{ cookiecutter.basePackage }}.biz.auth.user.UserService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;
import java.util.Objects;

/**
 * 用户关注管理
 */
@Slf4j
@RestController
@RequiredArgsConstructor
public class FollowController extends AuthBaseController {

    final FollowService followService;
    final UserService userService;

    /**
     * 关注
     *
     * @param followId 被关注用户ID
     */
    @GetMapping("/follow")
    public R<Void> follow(@RequestParam Integer followId) {
        if (Objects.equals(followId, getUserId())) {
            return R.fail("不能关注自己");
        }

        followService.follow(getUserId(), followId);
        return R.ok();
    }

    /**
     * 取消关注
     *
     * @param followId 被关注用户ID
     */
    @GetMapping("/unfollow")
    public R<Void> unfollow(@RequestParam Integer followId) {
        if (Objects.equals(followId, getUserId())) {
            return R.fail("不能取消关注自己");
        }
        followService.unfollow(getUserId(), followId);
        return R.ok();
    }

    /**
     * 获取粉丝列表
     */
    @GetMapping("/followers")
    public R<Page<User>> getFollowers(@Valid PaginationRequest req) {
        Page<User> p = new Page<>(req.getPageNum(), req.getPageSize());
        List<Integer> followers = followService.getFollowers(getUserId(), req.getPageNum(), req.getPageSize());
        if (followers.isEmpty()) {
            return R.ok(p);
        }

        // 获取昵称和头像
        LambdaQueryWrapper<User> wrapper = new LambdaQueryWrapper<>();
        wrapper.select(User::getId, User::getNickname, User::getAvatarUrl);
        wrapper.in(User::getId, followers);
        List<User> profiles = userService.list(wrapper);

        p.setRecords(profiles);
        return R.ok(p);
    }

    /**
     * 获取关注列表
     */
    @GetMapping("/followings")
    public R<Page<User>> getFollowings(@Valid PaginationRequest req) {
        Page<User> p = new Page<>(req.getPageNum(), req.getPageSize());
        List<Integer> followings = followService.getFollowing(getUserId(), req.getPageNum(), req.getPageSize());
        if (followings.isEmpty()) {
            return R.ok(p);
        }

        // 获取昵称和头像
        LambdaQueryWrapper<User> wrapper = new LambdaQueryWrapper<>();
        wrapper.select(User::getId, User::getNickname, User::getAvatarUrl);
        wrapper.in(User::getId, followings);
        List<User> profiles = userService.list(wrapper);
        p.setRecords(profiles);
        return R.ok(p);
    }

    /**
     * 个人统计
     */
    @GetMapping("/follow-stat")
    public R<FollowStatResponse> stat() {
        Long countFollowing = followService.countFollowing(getUserId());
        Long countFollowers = followService.countFollowers(getUserId());
        FollowStatResponse response = new FollowStatResponse(countFollowing, countFollowers);
        return R.ok(response);
    }

}
