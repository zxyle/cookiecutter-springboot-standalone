// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Whitelist;
import {{ cookiecutter.basePackage }}.biz.sys.mapper.WhitelistMapper;
import {{ cookiecutter.basePackage }}.biz.sys.service.IWhitelistService;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * IP黑名单 服务实现类
 */
@Service
public class WhitelistServiceImpl extends ServiceImpl<WhitelistMapper, Whitelist> implements IWhitelistService {

    /**
     * 按ID查询
     */
    @Cacheable(cacheNames = "WhitelistCache", key = "#id", unless = "#result == null")
    @Override
    public Whitelist queryById(Long id) {
        return getById(id);
    }

    /**
     * 获取有效的白名单
     */
    @Override
    public List<String> getWhitelist() {
        QueryWrapper<Whitelist> wrapper = new QueryWrapper<>();
        wrapper.select("ip");
        wrapper.isNull("end_time").or().ge("end_time", System.currentTimeMillis());
        List<Whitelist> list = list(wrapper);
        if (CollectionUtils.isNotEmpty(list)) {
            return list.stream().map(Whitelist::getIp).collect(Collectors.toList());
        }
        return new ArrayList<>();
    }
}
