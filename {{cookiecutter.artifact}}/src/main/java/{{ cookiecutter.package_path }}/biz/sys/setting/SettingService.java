// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// And git commit hash is {% gitcommit %}.

package {{ cookiecutter.basePackage }}.biz.sys.setting;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

/**
 * 系统设置 服务实现类
 */
@Slf4j
@Service
@CacheConfig(cacheNames = "SettingCache", cacheManager = "neverExpireCacheManager")
public class SettingService extends ServiceImpl<SettingMapper, Setting> {

    private static final String LABEL = "option_label";
    private static final String VALUE = "option_value";

    /**
     * 按ID查询
     */
    @Cacheable(key = "#id")
    public Setting findById(Integer id) {
        return getById(id);
    }

    /**
     * 按名称查询
     *
     * @param label 选项名称
     */
    @Cacheable(key = "#label")
    public Item get(String label) {
        QueryWrapper<Setting> wrapper = new QueryWrapper<>();
        wrapper.select(LABEL, VALUE, "data_type");
        wrapper.eq(LABEL, label);
        Setting one = getOne(wrapper);
        if (one != null) {
            return new Item(one);
        }
        return null;
    }

    @CachePut(key = "#label")
    public Item update(String label, String value) {
        UpdateWrapper<Setting> wrapper = new UpdateWrapper<>();
        wrapper.eq(LABEL, label);
        wrapper.set(VALUE, value);
        boolean updated = update(wrapper);
        if (updated) {
            QueryWrapper<Setting> wrapper2 = new QueryWrapper<>();
            wrapper2.select(LABEL, VALUE, "data_type");
            wrapper2.eq(LABEL, label);
            Setting one = getOne(wrapper2);
            return new Item(one);
        }
        return null;
    }

    /**
     * 按ID删除（带缓存）
     *
     * @param label 选项名称，用于清除缓存
     * @param id    选项ID
     */
    @CacheEvict(key = "#label")
    public boolean deleteById(String label, Integer id) {
        return removeById(id);
    }
}
