// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// And git commit hash is {% gitcommit %}.

package {{ cookiecutter.basePackage }}.biz.sys.file;

import cn.hutool.core.util.IdUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import {{ cookiecutter.basePackage }}.biz.sys.file.upload.UploadData;
import {{ cookiecutter.basePackage }}.biz.sys.file.upload.UploadRequest;
import {{ cookiecutter.basePackage }}.biz.sys.file.upload.UploadResponse;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import {{ cookiecutter.namespace }}.validation.Valid;
import {{ cookiecutter.namespace }}.validation.constraints.NotBlank;
import java.util.ArrayList;
import java.util.List;

/**
 * 文件管理
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/sys/file")
public class FileController {

    final FileService fileService;
    final StringRedisTemplate stringRedisTemplate;
    final FileStoreService fileStoreService;

    /**
     * 文件上传
     */
    @PostMapping(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public UploadResponse upload(@Valid UploadRequest req) {
        List<String> list = new ArrayList<>(req.getFiles().size());
        List<MultipartFile> files = req.getFiles();
        for (MultipartFile file : files) {
            if (file.isEmpty()) {
                continue;
            }
            String url = store(file, req.getFolder());
            list.add(url);
        }

        UploadData data = new UploadData();
        data.setUrls(list);
        data.setSuccess(true);
        return new UploadResponse(data);
    }

    /**
     * 文件下载
     *
     * @param filename 文件名 竞业协议模板.docx
     */
    // @Secured(value = "ROLE_admin")
    @GetMapping("/download")
    public R<File> download(String filename) {
        LambdaQueryWrapper<File> wrapper = new LambdaQueryWrapper<>();
        wrapper.eq(File::getFilename, filename);
        File one = fileService.getOne(wrapper);
        String key = String.format("%s:%s", "download", one.getId());
        stringRedisTemplate.opsForValue().increment(key);
        return R.ok(one);
    }

    /**
     * 删除已上传文件
     *
     * @param objectName 对象名称 /images/cat.jpg
     */
    @Secured(value = "ROLE_admin")
    @DeleteMapping("/delete")
    public R<Void> delete(@NotBlank String objectName) {
        boolean success = fileStoreService.delete(objectName);
        return R.result(success);
    }

    /**
     * 将文件上传到OSS的bucket中，防止文件重复，在文件名前加时间戳
     *
     * @param file   待上传文件
     * @param folder 上传到指定目录
     */
    private String store(MultipartFile file, String folder) {
        String extension = FilenameUtils.getExtension(file.getOriginalFilename());
        String objectName = IdUtil.fastSimpleUUID() + "." + extension;
        // String objectName = System.currentTimeMillis() + "-" + file.getOriginalFilename();
        if (StringUtils.isNotBlank(folder)) {
            objectName = folder + "/" + objectName;
        }
        return fileStoreService.upload(file, objectName);
    }
}
