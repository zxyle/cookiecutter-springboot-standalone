// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.auth.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Blacklist;
import {{ cookiecutter.basePackage }}.biz.sys.service.IBlacklistService;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * IP黑名单管理
 */
@RestController
@RequestMapping("/sys")
@RequiredArgsConstructor
public class BlacklistController {

    final IBlacklistService thisService;

    /**
     * 黑名单列表分页查询
     */
    @LogOperation(name = "黑名单列表分页查询", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:blacklist:list')")
    @GetMapping("/blacklists")
    public R<PageVO<Blacklist>> list(@Valid PaginationRequest req) {
        QueryWrapper<Blacklist> wrapper = new QueryWrapper<>();
        if (StringUtils.isNotBlank(req.getKeyword())) {
            wrapper.and(w -> w.like("ip", req.getKeyword())
                    .or().like("remark", req.getKeyword()));
        }

        IPage<Blacklist> page = thisService.page(req.toPageable(), wrapper);
        return R.page(page);
    }

    /**
     * 新增黑名单
     */
    @LogOperation(name = "新增黑名单", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:blacklist:add')")
    @PostMapping("/blacklists")
    public R<Blacklist> add(@Valid @RequestBody Blacklist entity) {
        boolean success = thisService.save(entity);
        return success ? R.ok(entity) : R.fail("新增IP黑名单失败");
    }

    /**
     * 按ID删除黑名单
     */
    @LogOperation(name = "按ID删除黑名单", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:blacklist:delete')")
    @DeleteMapping("/blacklists/{id}")
    public R<Void> delete(@PathVariable Integer id) {
        boolean success = thisService.removeById(id);
        return success ? R.ok("删除IP黑名单成功") : R.fail("删除IP黑名单失败");
    }

}
