// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.alibaba.excel.EasyExcelFactory;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.util.EntityUtil;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Feedback;
import {{ cookiecutter.basePackage }}.biz.sys.service.IFeedbackService;
import {{ cookiecutter.basePackage }}.common.request.OrderPageRequest;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.IOException;
import java.net.URLEncoder;

/**
 * 意见反馈
 */
@RestController
@RequestMapping("/sys")
public class FeedbackController {

    IFeedbackService thisService;

    public FeedbackController(IFeedbackService thisService) {
        this.thisService = thisService;
    }

    /**
     * 意见反馈列表分页查询
     */
    @PreAuthorize("@ck.hasPermit('sys:feedback:list')")
    @GetMapping("/feedbacks")
    public ApiResponse<PageVO<Feedback>> list(@Valid OrderPageRequest request, HttpServletResponse response) throws IOException {
        QueryWrapper<Feedback> wrapper = new QueryWrapper<>();
        wrapper.orderBy(EntityUtil.getFields(Feedback.class).contains(request.getField()),
                request.getOrder(), request.getField());
        IPage<Feedback> page = PageRequestUtil.checkForMp(request);
        IPage<Feedback> list = thisService.pageQuery(page, wrapper);

        // 数据导出
        if (request.isExport()) {
            response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
            String fileName = "意见反馈";
            String baseName = URLEncoder.encode(fileName, "UTF-8").replace("\\+", "%20");
            response.setHeader("Content-disposition", "attachment;filename*=utf-8''" + baseName + ".xlsx");
            EasyExcelFactory.write(response.getOutputStream(), Feedback.class)
                    .autoCloseStream(Boolean.TRUE).sheet("Sheet1").doWrite(list.getRecords());
            return null;
        }
        return PageRequestUtil.extractFromMp(list);
    }


    /**
     * 新增意见反馈
     */
    @PostMapping("/feedbacks")
    public ApiResponse<Feedback> add(@Valid @RequestBody Feedback entity) {
        boolean success = thisService.save(entity);
        if (success) {
            return new ApiResponse<>(entity);
        }
        return new ApiResponse<>("新增失败", false);
    }


    /**
     * 按ID查询意见反馈
     */
    @PreAuthorize("@ck.hasPermit('sys:feedback:get')")
    @GetMapping("/feedbacks/{id}")
    public ApiResponse<Feedback> get(@PathVariable Long id) {
        Feedback entity = thisService.queryById(id);
        if (entity == null) {
            return new ApiResponse<>("数据不存在", false);
        }
        return new ApiResponse<>(entity);
    }

    /**
     * 按ID更新意见反馈
     */
    @PreAuthorize("@ck.hasPermit('sys:feedback:update')")
    @PutMapping("/feedbacks/{id}")
    public ApiResponse<Object> update(@PathVariable Long id, @Valid @RequestBody Feedback entity) {
        entity.setId(id);
        boolean success = thisService.updateById(entity);
        if (success) {
            return new ApiResponse<>("更新成功");
        }
        return new ApiResponse<>("更新失败", false);
    }

    /**
     * 按ID删除意见反馈
     */
    @PreAuthorize("@ck.hasPermit('sys:feedback:delete')")
    @DeleteMapping("/feedbacks/{id}")
    public ApiResponse<Object> delete(@PathVariable Long id) {
        boolean success = thisService.removeById(id);
        if (success) {
            return new ApiResponse<>("删除成功");
        }
        return new ApiResponse<>("删除失败", false);
    }

    /**
     * 回复意见反馈
     */
    @PreAuthorize("@ck.hasPermit('sys:feedback:reply')")
    @PutMapping("/feedbacks/{id}/reply")
    public ApiResponse<Object> reply(@PathVariable Long id, @Valid @RequestBody Feedback entity) {
        entity.setId(id);
        // TODO 使用邮件发送回复内容
        // boolean success = thisService.reply(entity);
        boolean success = true;
        if (success) {
            return new ApiResponse<>("回复成功");
        }
        return new ApiResponse<>("回复失败", false);
    }

}
