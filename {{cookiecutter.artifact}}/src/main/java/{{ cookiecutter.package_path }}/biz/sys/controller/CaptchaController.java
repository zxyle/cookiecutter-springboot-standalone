// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import cn.hutool.core.util.IdUtil;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.request.SendCodeRequest;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.biz.sample.service.EmailService;
import {{ cookiecutter.basePackage }}.biz.sys.response.CaptchaResponse;
import {{ cookiecutter.basePackage }}.biz.sys.service.CaptchaPair;
import {{ cookiecutter.basePackage }}.biz.sys.service.CaptchaService;
import {{ cookiecutter.basePackage }}.biz.sys.service.VerifyService;
import {{ cookiecutter.basePackage }}.biz.sys.util.CaptchaUtil;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.NotBlank;
import java.io.IOException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;

/**
 * 图形数字验证码
 */
@RestController
@RequestMapping("/sys/captcha")
@Validated
public class CaptchaController {

    // 其他实现类 kaptchaServiceImpl
    @Autowired
    @Qualifier("patchcaServiceImpl")
    CaptchaService captchaService;

    @Resource
    StringRedisTemplate stringRedisTemplate;

    @Autowired
    IUserService userService;

    @Autowired
    VerifyService verifyService;

    @Value("${code.digits}")
    private Integer digits;

    @Value("${code.alive-time}")
    private Integer aliveTime;

    @Value("${code.principal}")
    private String authMethod;

    @Value("${code.ttl}")
    private Integer ttl;

    @Autowired
    private EmailService emailService;

    /**
     * 生成base64编码图形验证码
     */
    @GetMapping("/generate")
    public ApiResponse<CaptchaResponse> generate() {
        String key = IdUtil.simpleUUID();
        CaptchaPair captchaPair = captchaService.generate();
        stringRedisTemplate.opsForValue().set(key, captchaPair.getCode(), 60, TimeUnit.SECONDS);
        CaptchaResponse response = new CaptchaResponse(key, captchaPair.getB64Image());
        return new ApiResponse<>(response);
    }


    /**
     * 生成图形验证码
     */
    @GetMapping("/captchaImage")
    public void get(HttpServletResponse response) throws IOException {
        response.setHeader("Pragma", "no-cache");
        response.setHeader("Cache-Control", "no-cache");
        response.setDateHeader("Expires", 0);  // 在代理服务器端防止缓冲
        response.setContentType("image/jpeg");
        String key = IdUtil.simpleUUID();
        CaptchaPair captchaPair = captchaService.generate();
        stringRedisTemplate.opsForValue().set(key, captchaPair.getCode(), 60, TimeUnit.SECONDS);
        response.getOutputStream().write(captchaPair.getBytes());
        response.getOutputStream().flush();
    }


    /**
     * 校验短信、图形验证码
     *
     * @param code 用户输入结果
     */
    @GetMapping("/verify")
    public ApiResponse<Object> verify(@NotBlank String code, @NotBlank String captchaId) {
        boolean verify = verifyService.verify(code, captchaId);
        return new ApiResponse<>(verify);
    }

    /**
     * 发送短信邮件验证码
     */
    @GetMapping("/send")
    public ResponseEntity<Boolean> send(SendCodeRequest request) {
        // 查询手机号或邮箱绑定的用户
        User user = userService.queryByPrincipal(request.getMobile(), request.getEmail());
        if (null == user || isLocked(request.getPrincipal())) {
            // 可能用户不存在或验证码请求频繁
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }

        String key = "code:" + request.getPrincipal();
        // 生成随机数字
        String code = CaptchaUtil.randCode(digits);
        stringRedisTemplate.opsForHash().put(key, "principal", request.getPrincipal());
        stringRedisTemplate.opsForHash().put(key, "userId", String.valueOf(user.getId()));
        stringRedisTemplate.opsForHash().put(key, "code", code);
        stringRedisTemplate.expire(key, Duration.ofMinutes(aliveTime));

        if (authMethod.equals("email")) {
            // 调用邮件发送方法
            emailService.sendVerificationCode(code, user.getEmail());
        }

        if (authMethod.equals("mobile")) {
            // TODO 调用发送短信接口, 写入到消息队列中
        }
        locked(request.getPrincipal(), ttl);
        return ResponseEntity.ok(true);
    }

    // 防止验证码被滥用
    public void locked(String principal, Integer ttl) {
        String key = "locked:" + principal;
        stringRedisTemplate.opsForValue().set(key, "lock", ttl, TimeUnit.SECONDS);
    }

    public boolean isLocked(String principal) {
        String key = "locked:" + principal;
        return Boolean.TRUE.equals(stringRedisTemplate.hasKey(key));
    }

}
