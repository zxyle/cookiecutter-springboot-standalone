// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import {{ cookiecutter.basePackage }}.biz.auth.config.AuthUserProperties;
import {{ cookiecutter.basePackage }}.biz.auth.request.SendCodeRequest;
import {{ cookiecutter.basePackage }}.biz.auth.security.CaptchaProperties;
import {{ cookiecutter.basePackage }}.biz.auth.service.*;
import {{ cookiecutter.basePackage }}.biz.auth.util.AccountUtil;
import {{ cookiecutter.basePackage }}.biz.sys.response.CaptchaResponse;
import {{ cookiecutter.basePackage }}.biz.sys.service.CaptchaPair;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import {{ cookiecutter.basePackage }}.common.util.IpUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

/**
 * 图形数字验证码
 */
@RestController
@RequestMapping("/sys/captcha")
@Validated
@Slf4j
public class CaptchaController {

    StringRedisTemplate stringRedisTemplate;

    IUserService userService;

    CaptchaProperties captchaProperties;

    AuthUserProperties authUserProperties;

    EmailCodeService emailService;

    CodeService codeService;

    @Autowired
    ValidateService validateService;

    @Autowired
    HttpServletRequest servletRequest;

    @Autowired
    ShortMessageService shortMessageService;

    public CaptchaController(StringRedisTemplate stringRedisTemplate, IUserService userService, CaptchaProperties captchaProperties, AuthUserProperties authUserProperties, EmailCodeService emailService, CodeService codeService) {
        this.stringRedisTemplate = stringRedisTemplate;
        this.userService = userService;
        this.captchaProperties = captchaProperties;
        this.authUserProperties = authUserProperties;
        this.emailService = emailService;
        this.codeService = codeService;
    }

    /**
     * 生成base64编码图形验证码
     */
    @GetMapping("/generate")
    public ApiResponse<CaptchaResponse> generate() {
        CaptchaPair captchaPair = codeService.send();
        CaptchaResponse response = new CaptchaResponse(captchaPair.getCaptchaId(), captchaPair.getB64Image());
        return new ApiResponse<>(response);
    }


    /**
     * 生成图形验证码
     */
    @GetMapping("/captchaImage")
    public void get(HttpServletResponse response) throws IOException {
        response.setHeader("Pragma", "no-cache");
        response.setHeader("Cache-Control", "no-cache");
        response.setDateHeader("Expires", 0);  // 在代理服务器端防止缓冲
        response.setContentType("image/jpeg");
        CaptchaPair captchaPair = codeService.send();
        Cookie cookie = new Cookie("captchaId", captchaPair.getCaptchaId());
        cookie.setPath("/");
        response.addCookie(cookie);
        response.getOutputStream().write(captchaPair.getBytes());
        response.getOutputStream().flush();
    }


    /**
     * 校验短信、图形验证码
     *
     * @param code      用户输入结果
     * @param captchaId 图形验证码id
     */
    @GetMapping("/verify")
    public ApiResponse<Boolean> verify(@NotBlank String code, @NotBlank String captchaId) {
        boolean verify = codeService.verify(code, captchaId);
        return new ApiResponse<>(verify);
    }

    // TODO 安全隐患， 如果一个人频繁使用别人邮箱或手机号

    /**
     * 发送短信邮件验证码
     */
    @GetMapping("/send")
    public ApiResponse<Boolean> send(@Valid SendCodeRequest request) {
        String account = request.getAccount();

        if (isLocked(account)) {
            return new ApiResponse<>(HttpStatus.BAD_REQUEST.toString(), "请求验证码频繁", false);
        }

        String code = validateService.send(account);
        if (AccountUtil.isEmail(account)) {
            // 调用邮件发送方法
            emailService.sendVerificationCode(code, account);
        }

        if (AccountUtil.isMobile(account)) {
            // 调用发送短信接口, 写入到消息队列中
            shortMessageService.send(account, code);
        }

        String ipAddr = IpUtil.getIpAddr(servletRequest);
        locked(account, captchaProperties.getBetween(), ipAddr);
        return new ApiResponse<>(true);
    }

    // 防止验证码被滥用
    public void locked(String account, Integer between, String ipAddr) {
        String key = String.format("locked:%s:%s", ipAddr, account);
        stringRedisTemplate.opsForValue().set(key, "lock", captchaProperties.getBetween(), TimeUnit.SECONDS);
    }

    public boolean isLocked(String account) {
        String key = "locked:" + account;
        return Boolean.TRUE.equals(stringRedisTemplate.hasKey(key));
    }

}
