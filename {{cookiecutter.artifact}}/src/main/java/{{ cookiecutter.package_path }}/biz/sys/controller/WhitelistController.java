// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.auth.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Whitelist;
import {{ cookiecutter.basePackage }}.biz.sys.service.IWhitelistService;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * IP白名单管理
 */
@RestController
@RequestMapping("/sys")
@RequiredArgsConstructor
public class WhitelistController {

    final IWhitelistService thisService;

    /**
     * 白名单列表分页查询
     */
    @LogOperation(name = "白名单列表分页查询", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:whitelist:list')")
    @GetMapping("/whitelists")
    public R<PageVO<Whitelist>> list(@Valid PaginationRequest req) {
        QueryWrapper<Whitelist> wrapper = new QueryWrapper<>();
        if (StringUtils.isNotBlank(req.getKeyword())) {
            wrapper.and(w -> w.like("ip", req.getKeyword())
                    .or().like("remark", req.getKeyword()));
        }
        IPage<Whitelist> page = thisService.page(req.toPageable(), wrapper);
        return R.page(page);
    }


    /**
     * 新增IP白名单
     */
    @LogOperation(name = "新增IP白名单", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:whitelist:add')")
    @PostMapping("/whitelists")
    public R<Whitelist> add(@Valid @RequestBody Whitelist entity) {
        boolean success = thisService.save(entity);
        return success ? R.ok(entity) : R.fail("新增白名单失败");
    }


    /**
     * 按ID查询IP白名单
     */
    @LogOperation(name = "按ID查询IP白名单", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:whitelist:get')")
    @GetMapping("/whitelists/{id}")
    public R<Whitelist> get(@PathVariable Integer id) {
        return R.ok(thisService.findById(id));
    }

    /**
     * 按ID更新IP白名单
     */
    @LogOperation(name = "按ID更新IP白名单", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:whitelist:update')")
    @PutMapping("/whitelists/{id}")
    public R<Void> update(@PathVariable Integer id, @Valid @RequestBody Whitelist entity) {
        entity.setId(id);
        boolean success = thisService.updateById(entity);
        return success ? R.ok("更新白名单成功") : R.fail("更新白名单失败");
    }

    /**
     * 按ID删除IP白名单
     */
    @LogOperation(name = "按ID删除IP白名单", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:whitelist:delete')")
    @DeleteMapping("/whitelists/{id}")
    public R<Void> delete(@PathVariable Integer id) {
        boolean success = thisService.removeById(id);
        return success ? R.ok("删除白名单成功") : R.fail("删除白名单失败");
    }

}
