// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.alibaba.excel.EasyExcelFactory;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Whitelist;
import {{ cookiecutter.basePackage }}.biz.sys.service.IWhitelistService;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.IOException;
import java.net.URLEncoder;

/**
 * IP白名单管理
 */
@RestController
@RequestMapping("/sys")
@RequiredArgsConstructor
public class WhitelistController {

    final IWhitelistService thisService;

    /**
     * 白名单列表分页查询
     */
    @PreAuthorize("@ck.hasPermit('sys:whitelist:list')")
    @GetMapping("/whitelists")
    public R<PageVO<Whitelist>> list(@Valid PaginationRequest request) {
        QueryWrapper<Whitelist> wrapper = new QueryWrapper<>();
        if (StringUtils.isNotBlank(request.getKeyword())) {
            wrapper.and(w -> w.like("ip", request.getKeyword())
                    .or().like("remark", request.getKeyword()));
        }
        IPage<Whitelist> page = PageRequestUtil.checkForMp(request);
        IPage<Whitelist> list = thisService.page(page, wrapper);
        return PageRequestUtil.extractFromMp(list);
    }


    /**
     * 新增IP白名单
     */
    @PreAuthorize("@ck.hasPermit('sys:whitelist:add')")
    @PostMapping("/whitelists")
    public R<Whitelist> add(@Valid @RequestBody Whitelist entity) {
        boolean success = thisService.save(entity);
        return success ? R.ok(entity) : R.fail("新增黑名单失败");
    }


    /**
     * 按ID查询IP白名单
     */
    @PreAuthorize("@ck.hasPermit('sys:whitelist:get')")
    @GetMapping("/whitelists/{id}")
    public R<Whitelist> get(@PathVariable Long id) {
        return R.ok(thisService.queryById(id));
    }

    /**
     * 按ID更新IP白名单
     */
    @PreAuthorize("@ck.hasPermit('sys:whitelist:update')")
    @PutMapping("/whitelists/{id}")
    public R<Void> update(@PathVariable Long id, @Valid @RequestBody Whitelist entity) {
        entity.setId(id);
        boolean success = thisService.updateById(entity);
        return success ? R.ok("更新黑名单成功") : R.fail("更新黑名单失败");
    }

    /**
     * 按ID删除IP白名单
     */
    @PreAuthorize("@ck.hasPermit('sys:whitelist:delete')")
    @DeleteMapping("/whitelists/{id}")
    public R<Void> delete(@PathVariable Long id) {
        boolean success = thisService.removeById(id);
        return success ? R.ok("删除黑名单成功") : R.fail("删除黑名单失败");
    }

    /**
     * Excel导出白名单
     */
    @PreAuthorize("@ck.hasPermit('sys:whitelist:export')")
    @GetMapping("/whitelists/export")
    public void export(HttpServletResponse response) throws IOException {
        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
        String fileName = "IP白名单";
        String baseName = URLEncoder.encode(fileName, "UTF-8").replace("\\+", "%20");
        response.setHeader("Content-disposition", "attachment;filename*=utf-8''" + baseName + ".xlsx");
        EasyExcelFactory.write(response.getOutputStream(), Whitelist.class)
                .autoCloseStream(Boolean.TRUE).sheet("Sheet1").doWrite(thisService.list());
    }

}
