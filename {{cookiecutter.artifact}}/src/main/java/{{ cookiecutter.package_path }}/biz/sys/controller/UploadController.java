// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import {{ cookiecutter.basePackage }}.biz.sys.entity.File;
import {{ cookiecutter.basePackage }}.biz.sys.request.UploadRequest;
import {{ cookiecutter.basePackage }}.biz.sys.response.UploadData;
import {{ cookiecutter.basePackage }}.biz.sys.response.UploadResponse;
import {{ cookiecutter.basePackage }}.biz.sys.service.IFileService;
import {{ cookiecutter.basePackage }}.biz.sys.service.FileStoreService;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.MediaType;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import java.util.ArrayList;
import java.util.List;

/**
 * 文件管理
 */
@RestController
@RequestMapping("/file")
public class UploadController {

    @Autowired
    IFileService fileService;

    @Resource
    StringRedisTemplate stringRedisTemplate;

    @Autowired
    FileStoreService fileStoreService;

    /**
     * 文件上传
     */
    @PostMapping(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public UploadResponse upload(@Valid UploadRequest request) {
        List<String> list = new ArrayList<>(request.getFiles().size());
        List<MultipartFile> files = request.getFiles();
        for (MultipartFile file : files) {
            String url = store(file, request.getFolder());
            list.add(url);
        }

        UploadData data = new UploadData();
        data.setUrls(list);
        data.setSuccess(true);
        return new UploadResponse(data);
    }

    /**
     * 文件下载
     *
     * @param filename 文件名 竞业协议模板.docx
     */
    // @Secured(value = "ROLE_admin")
    @GetMapping("/download")
    public ApiResponse<File> download(String filename) {
        QueryWrapper<File> wrapper = new QueryWrapper<>();
        wrapper.eq("filename", filename);
        File one = fileService.getOne(wrapper);
        String key = String.format("%s:%s", "download", one.getId());
        stringRedisTemplate.opsForValue().increment(key);
        return new ApiResponse<>(one);
    }

    /**
     * 删除已上传文件
     *
     * @param objectName 对象名称 /images/cat.jpg
     */
    @Secured(value = "ROLE_admin")
    @DeleteMapping("/delete")
    public ApiResponse<Object> delete(@NotBlank String objectName) {
        boolean success = fileStoreService.delete(objectName);
        return new ApiResponse<>(success);
    }

    /**
     * 将文件上传到OSS的bucket中，防止文件重复，在文件名前加时间戳
     *
     * @param file   待上传文件
     * @param folder 上传到指定目录
     */
    public String store(MultipartFile file, String folder) {
        String objectName = System.currentTimeMillis() + "-" + file.getOriginalFilename();
        if (StringUtils.isNotBlank(folder)) {
            objectName = folder + "/" + objectName;
        }
        return fileStoreService.upload(file, objectName);
    }
}
