// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.auth.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Setting;
import {{ cookiecutter.basePackage }}.biz.sys.response.Item;
import {{ cookiecutter.basePackage }}.biz.sys.service.ISettingService;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * 系统设置管理
 */
@RestController
@RequestMapping("/sys")
@RequiredArgsConstructor
public class SettingController {

    final ISettingService thisService;

    /**
     * 系统设置分页查询
     */
    @LogOperation(name = "系统设置分页查询", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:setting:list')")
    @GetMapping("/settings")
    public R<PageVO<Setting>> page(@Valid PaginationRequest request) {
        IPage<Setting> page = PageRequestUtil.checkForMp(request);
        IPage<Setting> list = thisService.page(page);
        return PageRequestUtil.extractFromMp(list);
    }


    /**
     * 新增系统设置
     */
    @LogOperation(name = "新增系统设置", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:setting:add')")
    @PostMapping("/settings")
    public R<Setting> add(@Valid @RequestBody Setting entity) {
        boolean success = thisService.save(entity);
        return success ? R.ok(entity) : R.fail("新增系统设置失败");
    }


    /**
     * 按ID查询系统设置
     */
    @LogOperation(name = "按ID查询系统设置", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:setting:get')")
    @GetMapping("/settings/{id}")
    public R<Setting> get(@PathVariable Integer id) {
        Setting entity = thisService.findById(id);
        return entity == null ? R.fail("设置不存在") : R.ok(entity);
    }

    /**
     * 按ID更新系统设置
     */
    @LogOperation(name = "按ID更新系统设置", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:setting:update')")
    @PutMapping("/settings/{id}")
    public R<Void> update(@Valid @RequestBody Setting entity, @PathVariable Integer id) {
        entity.setId(id);
        Setting setting = thisService.getById(id);
        String optionValue = entity.getOptionValue();
        Item item = thisService.update(setting.getOptionLabel(), optionValue);
        return item != null ? R.ok("更新系统设置成功") : R.fail("更新系统设置失败");
    }

    /**
     * 按ID删除系统设置
     */
    @LogOperation(name = "按ID删除系统设置", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:setting:delete')")
    @DeleteMapping("/settings/{id}")
    public R<Void> delete(@PathVariable Integer id) {
        boolean success = thisService.removeById(id);
        return success ? R.ok("删除系统设置成功") : R.fail("删除系统设置失败");
    }

}
