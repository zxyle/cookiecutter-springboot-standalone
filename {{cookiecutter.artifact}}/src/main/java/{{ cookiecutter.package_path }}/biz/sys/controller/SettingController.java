// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.access.prepost.PreAuthorize;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Setting;
import {{ cookiecutter.basePackage }}.biz.sys.service.ISettingService;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;

/**
 * 系统设置
 */
@RestController
@RequestMapping("/sys")
public class SettingController {

    ISettingService thisService;

    public SettingController(ISettingService thisService) {
        this.thisService = thisService;
    }

    /**
     * 系统设置分页查询
     */
    @PreAuthorize("@ck.hasPermit('sys:settings:list')")
    @GetMapping("/settings")
    public ApiResponse<PageVO<Setting>> page(@Valid PaginationRequest request) {
        IPage<Setting> page = PageRequestUtil.checkForMp(request);
        IPage<Setting> list = thisService.pageQuery(page);
        return PageRequestUtil.extractFromMp(list);
    }


    /**
     * 新增系统设置
     */
    @PreAuthorize("@ck.hasPermit('sys:settings:add')")
    @PostMapping("/settings")
    public ApiResponse<Setting> add(@Valid @RequestBody Setting entity) {
        boolean success = thisService.save(entity);
        if (success) {
            return new ApiResponse<>(entity);
        }
        return new ApiResponse<>("新增失败", false);
    }


    /**
     * 按ID查询系统设置
     */
    @PreAuthorize("@ck.hasPermit('sys:settings:get')")
    @GetMapping("/settings/{id}")
    public ApiResponse<Setting> get(@PathVariable Long id) {
        Setting entity = thisService.queryById(id);
        if (entity == null) {
            return new ApiResponse<>("数据不存在", false);
        }
        return new ApiResponse<>(entity);
    }

    /**
     * 按ID更新系统设置
     */
    @PreAuthorize("@ck.hasPermit('sys:settings:update')")
    @PutMapping("/settings/{id}")
    public ApiResponse<Object> update(@Valid @RequestBody Setting entity, @PathVariable Long id) {
        entity.setId(id);
        boolean success = thisService.updateById(entity);
        if (success) {
            return new ApiResponse<>("更新成功");
        }
        return new ApiResponse<>("更新失败", false);
    }

    /**
     * 按ID删除系统设置
     */
    @PreAuthorize("@ck.hasPermit('sys:settings:delete')")
    @DeleteMapping("/settings/{id}")
    public ApiResponse<Object> delete(@PathVariable Long id) {
        boolean success = thisService.removeById(id);
        if (success) {
            return new ApiResponse<>("删除成功");
        }
        return new ApiResponse<>("删除失败", false);
    }

}
