// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Area;
import {{ cookiecutter.basePackage }}.biz.sys.request.AreaRequest;
import {{ cookiecutter.basePackage }}.biz.sys.response.AntdTree2;
import {{ cookiecutter.basePackage }}.biz.sys.service.IAreaService;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import {{ cookiecutter.basePackage }}.biz.sys.response.AreaNode;
import {{ cookiecutter.basePackage }}.common.util.TreeUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import javax.validation.Valid;

import java.util.List;
import java.util.stream.Collectors;


/**
 * 行政区划接口
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/sys/area")
public class AreaController {

    final IAreaService thisService;

    /**
     * 获取中国行政区划树状结构
     */
    @GetMapping("/tree")
    @Cacheable(cacheNames = "AreaCache", key = "#request.rootId+#request.level")
    public R<AntdTree2> tree(@Valid AreaRequest request) {
        String rootId = request.getRootId();
        Integer level = request.getLevel();
        QueryWrapper<Area> wrapper = new QueryWrapper<>();
        wrapper.select("code, name, parent_id, level");
        wrapper.le("level", level);
        String rootName = "中国";
        String rootCode = "0000";
        Integer rootLevel = 1;
        if (!rootId.equals("0000")) {
            wrapper.likeRight("code", rootId);
            Area rootArea = thisService.findAreaByCode(rootId);
            rootName = rootArea.getName();
            rootCode = rootArea.getCode();
            rootLevel = rootArea.getLevel();
        }

        if ((level - rootLevel) > 3) {
            return R.fail("查询超过层级限制");
        }

        List<Area> areas = thisService.list(wrapper);
        List<AreaNode> nodes = areas.stream()
                .map(node -> new AreaNode(node.getName(), node.getParentId(), node.getCode()))
                .collect(Collectors.toList());

        List<AntdTree2> listTree = TreeUtil.createTree(nodes, rootId);
        AntdTree2 tree = new AntdTree2(rootName, rootCode, listTree);
        return R.ok(tree);
    }
}
