// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import {{ cookiecutter.basePackage }}.biz.sys.request.redis.KeySetRequest;
import {{ cookiecutter.basePackage }}.biz.sys.response.RedisKeyResponse;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.Valid;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * Redis管理
 */
@RestController
@RequestMapping("/sys")
public class RedisController {

    @Resource
    StringRedisTemplate stringRedisTemplate;

    /**
     * 获取key列表
     *
     * @param pattern 通配符，默认 *
     */
    @PreAuthorize("@ck.hasPermit('sys:key:list')")
    @GetMapping("/keys")
    public ApiResponse<Set<String>> list(@RequestParam(defaultValue = "*") String pattern) {
        Set<String> keys = stringRedisTemplate.keys(pattern);
        return new ApiResponse<>(keys);
    }

    /**
     * 删除key
     *
     * @param key key
     */
    @PreAuthorize("@ck.hasPermit('sys:key:delete')")
    @DeleteMapping("/keys/{key}")
    public ApiResponse<String> delete(@PathVariable String key) {
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        if (Boolean.FALSE.equals(hasKey)) {
            return new ApiResponse<>("删除失败，key不存在", false);
        }
        Boolean delete = stringRedisTemplate.delete(key);
        if (Boolean.TRUE.equals(delete)) {
            return new ApiResponse<>("删除成功");
        }
        return new ApiResponse<>("删除失败", false);
    }

    /**
     * 获取key的值
     *
     * @param key key
     */
    @PreAuthorize("@ck.hasPermit('sys:key:get')")
    @GetMapping("/keys/{key}")
    public ApiResponse<RedisKeyResponse> get(@PathVariable String key) {
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        if (Boolean.FALSE.equals(hasKey)) {
            return new ApiResponse<>("获取失败，key不存在", false);
        }

        // 获取key基本信息
        RedisKeyResponse keyResponse = new RedisKeyResponse(
                key,
                stringRedisTemplate.opsForValue().get(key),
                stringRedisTemplate.getExpire(key),
                stringRedisTemplate.type(key)
        );

        return new ApiResponse<>(keyResponse);
    }

    /**
     * 设置key的值
     */
    @PreAuthorize("@ck.hasPermit('sys:key:set')")
    @PostMapping("/keys")
    public ApiResponse<Object> set(@Valid @RequestBody KeySetRequest request) {
        // TODO 目前只支持STRING类型，后续增加其他类型支持
        stringRedisTemplate.opsForValue().set(request.getName(), request.getValue());

        if (request.getExpire() != null) {
            stringRedisTemplate.expire(request.getName(), request.getExpire(), TimeUnit.SECONDS);
        }
        return new ApiResponse<>("设置成功");
    }

    /**
     * key 重命名
     *
     * @param oldKey 旧key
     * @param newKey 新key
     */
    @PreAuthorize("@ck.hasPermit('sys:key:rename')")
    @PutMapping("/keys/{oldKey}/rename/{newKey}")
    public ApiResponse<Object> rename(@PathVariable String oldKey, @PathVariable String newKey) {
        Boolean hasKey = stringRedisTemplate.hasKey(oldKey);
        if (Boolean.FALSE.equals(hasKey)) {
            return new ApiResponse<>("重命名失败，key不存在", false);
        }

        stringRedisTemplate.rename(oldKey, newKey);
        return new ApiResponse<>("重命名成功");
    }

    /**
     * 设置过期时间
     *
     * @param key     key
     * @param seconds 过期时间，单位秒
     */
    @PreAuthorize("@ck.hasPermit('sys:key:expire')")
    @PutMapping("/keys/{key}/expire/{seconds}")
    public ApiResponse<Object> expire(@PathVariable String key, @PathVariable Integer seconds) {
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        if (Boolean.FALSE.equals(hasKey)) {
            return new ApiResponse<>("设置过期时间，key不存在", false);
        }

        Boolean expire = stringRedisTemplate.expire(key, seconds, TimeUnit.SECONDS);
        if (Boolean.FALSE.equals(expire))
            return new ApiResponse<>("设置过期时间失败", false);

        return new ApiResponse<>("设置过期时间成功");
    }

}
