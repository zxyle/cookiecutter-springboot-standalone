// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Dict;
import {{ cookiecutter.basePackage }}.biz.sys.request.dict.MultiDictTypeRequest;
import {{ cookiecutter.basePackage }}.biz.sys.service.IDictService;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.R;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.*;

/**
 * 字典管理
 */
@RestController
@RequestMapping("/sys")
@RequiredArgsConstructor
public class DictController {

    final IDictService thisService;

    /**
     * 分页查询
     */
    @Cacheable(cacheNames = "dictCache")
    @GetMapping("/dicts")
    public R<PageVO<Dict>> list(@Valid PaginationRequest request) {
        IPage<Dict> page = PageRequestUtil.checkForMp(request);
        IPage<Dict> list = thisService.page(page);
        return PageRequestUtil.extractFromMp(list);
    }


    /**
     * 新增字典
     */
    @PreAuthorize("@ck.hasPermit('sys:dict:add')")
    @Cacheable(cacheNames = "dictCache")
    @PostMapping("/dicts")
    public R<Dict> add(@Valid @RequestBody Dict entity) {
        boolean success = thisService.save(entity);
        return success ? R.ok(entity) : R.fail("新增字典失败");
    }


    /**
     * 按ID查询字典
     */
    @PreAuthorize("@ck.hasPermit('sys:dict:get')")
    @Cacheable(cacheNames = "dictCache", key = "#id")
    @GetMapping("/dicts/{id}")
    public R<Dict> get(@PathVariable Long id) {
        return R.ok(thisService.getById(id));
    }

    /**
     * 按多个字典类型查询
     */
    @GetMapping("/dicts/dictType")
    public R<Map<String, List<Dict>>> getByDictType(@Valid MultiDictTypeRequest request) {
        Map<String, List<Dict>> map = new HashMap<>();
        String[] types = request.getTypes().split(",");
        for (String type : types) {
            List<Dict> dicts = thisService.listDictsByType(type.trim());
            map.put(type, dicts);
        }
        return R.ok(map);
    }

    /**
     * 查询所有字典类型
     */
    @GetMapping("/dicts/dictTypes")
    public R<List<Dict>> all() {
        QueryWrapper<Dict> wrapper = new QueryWrapper<>();
        wrapper.select("name, dict_type");
        wrapper.groupBy("name", "dict_type");
        List<Dict> dicts = thisService.list(wrapper);
        return R.ok(dicts);
    }

    /**
     * 按ID更新字典
     */
    @PreAuthorize("@ck.hasPermit('sys:dict:update')")
    @PutMapping("/dicts/{id}")
    public R<Void> update(@PathVariable Long id, @Valid @RequestBody Dict entity) {
        entity.setId(id);
        boolean success = thisService.updateById(entity);
        return success ? R.ok("更新字典成功") : R.fail("更新字典失败");
    }

    /**
     * 按ID删除字典
     */
    @PreAuthorize("@ck.hasPermit('sys:dict:delete')")
    @DeleteMapping("/dicts/{id}")
    public R<Void> delete(@PathVariable Long id) {
        boolean success = thisService.removeById(id);
        return success ? R.ok("删除字典成功") : R.fail("删除字典失败");
    }

}
