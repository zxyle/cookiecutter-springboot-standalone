// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sys.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Dict;
import {{ cookiecutter.basePackage }}.biz.sys.request.dict.MultiDictTypeRequest;
import {{ cookiecutter.basePackage }}.biz.sys.service.IDictService;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 字典管理
 */
@RestController
@RequestMapping("/sys")
public class DictController {

    IDictService thisService;

    public DictController(IDictService thisService) {
        this.thisService = thisService;
    }

    /**
     * 分页查询
     */
    @Cacheable(cacheNames = "dictCache")
    @GetMapping("/dicts")
    public ApiResponse<PageVO<Dict>> list(@Valid PaginationRequest request) {
        IPage<Dict> page = PageRequestUtil.checkForMp(request);
        IPage<Dict> list = thisService.page(page);
        return PageRequestUtil.extractFromMp(list);
    }


    /**
     * 新增字典
     */
    @PreAuthorize("@ck.hasPermit('sys:dict:add')")
    @Cacheable(cacheNames = "dictCache")
    @PostMapping("/dicts")
    public ApiResponse<Dict> add(@Valid @RequestBody Dict entity) {
        boolean success = thisService.save(entity);
        if (success) {
            return new ApiResponse<>(entity);
        }
        return new ApiResponse<>("新增失败", false);
    }


    /**
     * 按ID查询字典
     */
    @PreAuthorize("@ck.hasPermit('sys:dict:get')")
    @Cacheable(cacheNames = "dictCache", key = "#id")
    @GetMapping("/dicts/{id}")
    public ApiResponse<Dict> get(@PathVariable Long id) {
        return new ApiResponse<>(thisService.getById(id));
    }

    /**
     * 按类型查询字典
     */
    @GetMapping("/dicts/dictType")
    public ApiResponse<Map<String, List<Dict>>> getByDictType(MultiDictTypeRequest request) {
        Map<String, List<Dict>> map = new HashMap<>();
        for (String type : request.getTypes()) {
            List<Dict> dicts = thisService.listAllDicts(type);
            map.put(type, dicts);
        }
        return new ApiResponse<>(map);
    }


    /**
     * 按ID更新字典
     */
    @PreAuthorize("@ck.hasPermit('sys:dict:update')")
    @PutMapping("/dicts/{id}")
    public ApiResponse<Object> update(@PathVariable Long id, @Valid @RequestBody Dict entity) {
        entity.setId(id);
        boolean success = thisService.updateById(entity);
        if (success) {
            return new ApiResponse<>("更新成功");
        }
        return new ApiResponse<>("更新失败", false);
    }

    /**
     * 按ID删除字典
     */
    @PreAuthorize("@ck.hasPermit('sys:dict:delete')")
    @DeleteMapping("/dicts/{id}")
    public ApiResponse<Object> delete(@PathVariable Long id) {
        boolean success = thisService.removeById(id);
        if (success) {
            return new ApiResponse<>("删除成功");
        }
        return new ApiResponse<>("删除失败", false);
    }

}
