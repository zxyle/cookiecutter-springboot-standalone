// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// And git commit hash is {% gitcommit %}.

package {{ cookiecutter.basePackage }}.biz.sys.log;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.common.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;

/**
 * 日志审计
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/sys/logs")
public class LogAuditController {

    final LoginLogService loginLogService;
    final OperateLogService operateLogService;

    /**
     * 登录日志分页查询
     */
    @LogOperation(name = "登录日志分页查询", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:login:list')")
    @GetMapping("/login")
    public R<PageVO<LoginLog>> list(@Valid LoginLogRequest req) {
        QueryWrapper<LoginLog> wrapper = new QueryWrapper<>();
        wrapper.like(StringUtils.isNotBlank(req.getAccount()), "account", req.getAccount());
        wrapper.orderBy(true, req.isAsc(), "login_time");
        IPage<LoginLog> page = loginLogService.page(req.toPageable(), wrapper);
        return R.page(page);
    }

    /**
     * 操作日志分页查询
     */
    @LogOperation(name = "操作日志分页查询", biz = "sys")
    @PreAuthorize("@ck.hasPermit('sys:operate:list')")
    @GetMapping("/operate")
    public R<PageVO<OperateLog>> page(@Valid OperateLogRequest req) {
        QueryWrapper<OperateLog> wrapper = new QueryWrapper<>();
        wrapper.eq(req.getUserId() != null, "user_id", req.getUserId());
        wrapper.eq(StringUtils.isNotBlank(req.getBiz()), "biz", req.getBiz());
        wrapper.between(req.getStartTime() != null && req.getEndTime() != null,
                "operate_time", req.getStartTime(), req.getEndTime());
        wrapper.orderBy(true, req.isAsc(), "operate_time");
        IPage<OperateLog> page = operateLogService.page(req.toPageable(), wrapper);
        return R.page(page);
    }
}
