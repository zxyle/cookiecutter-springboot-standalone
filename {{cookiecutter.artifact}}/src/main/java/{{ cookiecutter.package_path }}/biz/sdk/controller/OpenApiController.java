// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sdk.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.sdk.entity.OpenApi;
import {{ cookiecutter.basePackage }}.biz.sdk.service.IOpenApiService;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.response.R;
import {{ cookiecutter.basePackage }}.common.util.EntityUtil;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * 开放接口管理
 */
@RestController
@RequestMapping("/auth")
public class OpenApiController {

    IOpenApiService thisService;

    public OpenApiController(IOpenApiService thisService) {
        this.thisService = thisService;
    }

    /**
     * 开放接口分页查询
     */
    @PreAuthorize("@ck.hasPermit('auth:openApis:list')")
    @GetMapping("/openApis")
    public R<PageVO<OpenApi>> page(@Valid PaginationRequest request) {
        QueryWrapper<OpenApi> wrapper = new QueryWrapper<>();
        wrapper.orderBy(EntityUtil.getFields(OpenApi.class).contains(request.getField()),
                request.isAsc(), request.getField());
        IPage<OpenApi> page = PageRequestUtil.checkForMp(request);
        IPage<OpenApi> list = thisService.pageQuery(page, wrapper);
        return PageRequestUtil.extractFromMp(list);
    }


    /**
     * 新增开放接口
     */
    @PreAuthorize("@ck.hasPermit('auth:openApis:add')")
    @PostMapping("/openApis")
    public R<OpenApi> add(@Valid @RequestBody OpenApi entity) {
        boolean success = thisService.save(entity);
        return success ? R.ok(entity) : R.fail("新增失败");
    }


    /**
     * 按ID查询开放接口
     */
    @PreAuthorize("@ck.hasPermit('auth:openApis:get')")
    @GetMapping("/openApis/{id}")
    public R<OpenApi> get(@PathVariable Long id) {
        OpenApi entity = thisService.queryById(id);
        return entity == null ? R.fail("数据不存在") : R.ok(entity);
    }


    /**
     * 按ID更新开放接口
     */
    @PreAuthorize("@ck.hasPermit('auth:openApis:update')")
    @PutMapping("/openApis/{id}")
    public R<Void> update(@Valid @RequestBody OpenApi entity, @PathVariable Long id) {
        entity.setId(id);
        boolean success = thisService.updateById(entity);
        return success ? R.ok("更新成功") : R.fail("更新失败");
    }


    /**
     * 按ID删除开放接口
     */
    @PreAuthorize("@ck.hasPermit('auth:openApis:delete')")
    @DeleteMapping("/openApis/{id}")
    public R<Void> delete(@PathVariable Long id) {
        boolean success = thisService.removeById(id);
        return success ? R.ok("删除成功") : R.fail("删除失败");
    }

}
