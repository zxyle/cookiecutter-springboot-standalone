// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.sdk.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.sdk.entity.OpenApi;
import {{ cookiecutter.basePackage }}.biz.sdk.mapper.OpenApiMapper;
import {{ cookiecutter.basePackage }}.biz.sdk.service.IOpenApiService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

/**
 * 开放接口 服务实现类
 */
@Slf4j
@Service
public class OpenApiServiceImpl extends ServiceImpl<OpenApiMapper, OpenApi> implements IOpenApiService {

    /**
     * 按ID查询（带缓存）
     */
    @Cacheable(cacheNames = "OpenApiCache", key = "#id", unless = "#result == null")
    @Override
    public OpenApi queryById(Long id) {
        return getById(id);
    }

    /**
     * 按ID更新（带缓存）
     */
    @CachePut(cacheNames = "OpenApiCache", key = "#entity.id")
    @Override
    public OpenApi putById(OpenApi entity) {
        updateById(entity);
        return getById(entity.getId());
    }

    /**
     * 按ID删除（带缓存）
     */
    @CacheEvict(cacheNames = "OpenApiCache", key = "#id")
    @Override
    public void deleteById(Long id) {
        removeById(id);
    }

    /**
     * 分页查询（带缓存）
     */
    @Override
    public IPage<OpenApi> pageQuery(IPage<OpenApi> p, QueryWrapper<OpenApi> wrapper) {
        return page(p, wrapper);
    }

    /**
     * 根据appId获取有效的OpenApi
     *
     * @param appId 应用ID
     */
    @Cacheable(cacheNames = "OpenApiCache", key = "#appId")
    @Override
    public OpenApi getValidOpenApi(String appId) {
        QueryWrapper<OpenApi> wrapper = new QueryWrapper<>();
        wrapper.select("user_id", "app_secret");
        wrapper.eq("app_id", appId);
        wrapper.ge("expire_time", LocalDateTime.now());
        return getOne(wrapper, false);
    }
}
