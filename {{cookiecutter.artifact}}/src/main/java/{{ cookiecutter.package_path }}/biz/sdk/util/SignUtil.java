// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.util;

import cn.hutool.crypto.SecureUtil;
import org.apache.commons.lang3.StringUtils;

import java.util.*;


/**
 * 接口校验工具类
 * 生成有序map,签名，验签
 * 通过appId、timestamp、appSecret做签名
 */
public final class SignUtil {

    private SignUtil() {
    }

    /**
     * 生成签名sign
     * 加密前：appId=wx123456789&timestamp=1583332804914&key=7214fefff0cf47d7950cb2fc3b5d670a
     * 加密后：E2B30D3A5DA59959FA98236944A7D9CA
     */
    public static String createSign(Map<String, String> params) {
        SortedMap<String, String> sortedMap = new TreeMap<>(params);
        List<String> list = new ArrayList<>();
        Set<Map.Entry<String, String>> entries = sortedMap.entrySet();
        // 生成签名前，去除sign字段
        for (Map.Entry<String, String> entry : entries) {
            String key = entry.getKey();
            String value = entry.getValue();
            if (StringUtils.isNotBlank(value) && !"sign".equals(key)) {
                list.add(String.format("%s=%s", key, value));
            }
        }

        String s = String.join("&", list);
        return SecureUtil.md5(s);
    }

    /**
     * 校验签名
     */
    public static Boolean isCorrect(Map<String, String> params) {
        String timestamp = params.get("timestamp");
        if (StringUtils.isBlank(timestamp)) {
            return false;
        }

        // 校验时间戳是否超时，时间间隔超过1分钟，则认为接口为重复调用，返回错误信息
        long now = System.currentTimeMillis();
        long requestTime = Long.parseLong(timestamp);
        if (Math.abs(now - requestTime) > 60 * 1000) {
            return false;
        }

        String sign = createSign(params);
        String requestSign = params.get("sign");
        return StringUtils.isNotBlank(requestSign) && requestSign.equalsIgnoreCase(sign);
    }
}
