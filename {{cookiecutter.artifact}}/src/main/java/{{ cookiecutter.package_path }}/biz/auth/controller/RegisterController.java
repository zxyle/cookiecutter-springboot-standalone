// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import {{ cookiecutter.basePackage }}.biz.auth.config.AuthUserProperties;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.request.user.RegisterRequest;
import {{ cookiecutter.basePackage }}.biz.auth.response.RegisterResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.CodeService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.biz.auth.service.ValidateService;
import {{ cookiecutter.basePackage }}.biz.auth.util.AccountUtil;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * 注册管理
 */
@Slf4j
@RestController
@RequestMapping("/auth/user")
public class RegisterController {

    AuthUserProperties properties;

    ValidateService validateService;

    CodeService codeService;

    IUserService userService;

    PasswordEncoder encoder;

    public RegisterController(IUserService userService, AuthUserProperties properties, ValidateService validateService, CodeService codeService, PasswordEncoder encoder) {
        this.userService = userService;
        this.properties = properties;
        this.validateService = validateService;
        this.codeService = codeService;
        this.encoder = encoder;
    }

    /**
     * 用户注册
     */
    @PostMapping("/register")
    public ApiResponse<RegisterResponse> register(@Valid @RequestBody RegisterRequest request) {
        String account = request.getAccount();
        // 检查是否开放注册
        if (!properties.isOpenRegistration()) {
            return new ApiResponse<>("系统未开放注册", false);
        }

        // 校验验证码是否正确
        if (AccountUtil.isUsername(account)) {
            if (!codeService.verify(request.getCode(), request.getCaptchaId())) {
                return new ApiResponse<>("验证码可能错误或过期", false);
            }
        } else {
            String key = "code:" + account;
            if (!validateService.validate(key, request.getCode())) {
                return new ApiResponse<>("验证码可能错误或过期", false);
            }
        }

        // 检查是否已被占用
        if (userService.queryByAccount(account) != null) {
            return new ApiResponse<>("账号已被占用", false);
        }

        // 创建用户
        User user = userService.create(account, encoder.encode(request.getPassword()));
        boolean success = userService.save(user);
        if (!success) {
            return new ApiResponse<>("注册失败", false);
        }

        // 赋予默认角色
        List<Long> roleIds = Collections.singletonList(properties.getDefaultRole());
        userService.updateRelation(user.getId(), roleIds, null, null);
        return new ApiResponse<>("注册成功");
    }

    /**
     * 检查账号名占用
     *
     * @param account 注册账号
     */
    @PreAuthorize("@ck.hasPermit('auth:user:check')")
    @GetMapping("/check")
    public ApiResponse<Boolean> check(@NotBlank String account) {
        if (userService.queryByAccount(account) == null) {
            return new ApiResponse<>("可以注册");
        }
        return new ApiResponse<>("账号名已经被占用，请更换账号名重试", false);
    }

    /**
     * 随机生成用户名
     *
     * @param prefix 前缀
     */
    @GetMapping("/random")
    @PreAuthorize("@ck.hasPermit('auth:user:random')")
    public ApiResponse<List<String>> random(String prefix) {
        List<String> list = new ArrayList<>();
        list.add(prefix + "_001");
        return new ApiResponse<>(list);
    }
}
