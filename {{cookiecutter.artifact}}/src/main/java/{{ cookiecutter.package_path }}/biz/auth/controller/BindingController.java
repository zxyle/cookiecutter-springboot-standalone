// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.request.user.BindingRequest;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.biz.auth.service.ValidateService;
import {{ cookiecutter.basePackage }}.common.util.AccountUtil;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;

/**
 * 登录方式管理
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/auth/user")
public class BindingController extends AuthBaseController {

    final IUserService userService;
    final ValidateService validateService;

    /**
     * 绑定手机号或邮箱
     *
     * @apiNote 该接口需先请求发送验证码接口
     */
    @PostMapping("/binding")
    public R<Void> binding(@Valid @RequestBody BindingRequest request) {
        User user = getLoggedInUser();

        // 校验是否已解绑
        if ((AccountUtil.isEmail(request.getAccount()) && StringUtils.isNotBlank(user.getEmail())) ||
                (AccountUtil.isMobile(request.getAccount()) && StringUtils.isNotBlank(user.getMobile()))) {
            String key = "code:" + request.getOldAccount();
            if (!validateService.validate(key, request.getOldCode())) {
                return R.fail("解绑失败");
            }
        }

        String account = request.getAccount();
        if (userService.queryByAccount(account) != null) {
            return R.fail("该账号已绑定其他用户");
        }

        // 获取redis中验证码, 校验是否正确
        String key = "code:" + account;
        if (!validateService.validate(key, request.getCode())) {
            return R.fail("验证码错误");
        }

        // 更新用户信息
        UpdateWrapper<User> wrapper = new UpdateWrapper<>();
        wrapper.set(AccountUtil.isMobile(account), "mobile", account);
        wrapper.set(AccountUtil.isEmail(account), "email", account);
        wrapper.eq("id", getUserId());
        boolean success = userService.update(wrapper);
        return success ? R.ok("绑定成功") : R.fail("绑定失败");
    }
}
