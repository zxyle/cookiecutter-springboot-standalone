// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import {{ cookiecutter.basePackage }}.biz.auth.entity.RolePermission;
import {{ cookiecutter.basePackage }}.biz.auth.request.permission.BatchRequest;
import {{ cookiecutter.basePackage }}.biz.auth.service.IPermissionService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IRolePermissionService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

/**
 * 角色权限信息
 */
@RestController
@RequestMapping("/auth")
public class RolePermissionController extends AuthBaseController {

    IRolePermissionService thisService;

    IPermissionService permissionService;

    public RolePermissionController(IRolePermissionService thisService, IPermissionService permissionService) {
        this.thisService = thisService;
        this.permissionService = permissionService;
    }

    /**
     * 查询角色所拥有权限
     *
     * @param roleId 角色ID
     */
    @Secured(value = "ROLE_admin")
    @GetMapping("/roles/{roleId}/permissions")
    public ApiResponse<List<RolePermission>> list(@PathVariable Long roleId) {
        List<RolePermission> permissions = thisService.queryRelation(roleId, 0L);
        return new ApiResponse<>(permissions);
    }


    /**
     * 角色新增权限
     *
     * @param roleId 角色ID
     */
    @Secured(value = "ROLE_admin")
    @PostMapping("/roles/{roleId}/permissions")
    public ApiResponse<RolePermission> add(@PathVariable Long roleId, @Valid @RequestBody BatchRequest request) {
        thisService.deleteRelation(roleId, 0L);
        if (addPermission(roleId, request.getIds())) {
            return new ApiResponse<>("角色新增权限成功");
        }
        return new ApiResponse<>("新增失败", false);
    }

    /**
     * 更新角色权限
     *
     * @param roleId 角色ID
     */
    @Secured(value = "ROLE_admin")
    @PutMapping("/roles/{roleId}/permissions/{permissionId}")
    public ApiResponse<Object> update(@PathVariable Long roleId, @Valid @RequestBody BatchRequest request) {
        thisService.deleteRelation(roleId, 0L);
        if (addPermission(roleId, request.getIds())) {
            return new ApiResponse<>("角色更新权限成功");
        }
        return new ApiResponse<>("角色更新权限失败", false);
    }

    // 添加权限
    public boolean addPermission(Long roleId, List<Long> permissionIds) {
        if (CollectionUtils.isNotEmpty(permissionIds)) {
            for (Long permissionId : permissionIds) {
                thisService.createRelation(roleId, permissionId);
            }

            // 刷新持有该角色的权限信息
            List<Long> users = getUsersByRole(roleId);
            users.forEach(userId -> permissionService.refreshPermissions(userId));
        }
        return true;
    }

}
