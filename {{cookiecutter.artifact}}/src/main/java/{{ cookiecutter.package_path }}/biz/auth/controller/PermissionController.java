// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import cn.hutool.core.lang.tree.Tree;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Permission;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.PermissionMapper;
import {{ cookiecutter.basePackage }}.biz.auth.request.permission.AddPermissionRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.permission.TreePermissionRequest;
import {{ cookiecutter.basePackage }}.biz.auth.service.IPermissionService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.springframework.beans.BeanUtils;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

/**
 * 权限管理
 */
@RestController
@RequestMapping("/auth")
public class PermissionController extends AuthBaseController {

    PermissionMapper permissionMapper;

    IPermissionService thisService;

    public PermissionController(PermissionMapper permissionMapper, IPermissionService thisService) {
        this.permissionMapper = permissionMapper;
        this.thisService = thisService;
    }

    /**
     * 获取权限树
     *
     * @apiNote 1. 该接口只有管理员才能访问 2. 该接口返回name-节点名、id-节点值、children-子节点、path-路由、sort-排序等字段
     */
    @PreAuthorize("@ck.hasPermit('auth:permission:tree')")
    @Secured("ROLE_admin")
    @GetMapping("/permissions/tree")
    public ApiResponse<List<Tree<Integer>>> tree(TreePermissionRequest request) {
        QueryWrapper<Permission> wrapper = new QueryWrapper<>();
        wrapper.eq(request.getKind() != null, "kind", request.getKind());
        List<Permission> list = thisService.list(wrapper);
        List<Tree<Integer>> tree = thisService.getTree(list, request.getRootPermissionId());
        return new ApiResponse<>(tree);
    }

    /**
     * 查询用户拥有所有权限信息
     */
    @GetMapping("/permissions")
    @PreAuthorize("@ck.hasPermit('auth:permission:list')")
    public ApiResponse<List<Permission>> list() {
        List<Permission> permissions = thisService.getAllPermissions(getUserId());
        return new ApiResponse<>(permissions);
    }


    /**
     * 新增权限
     */
    @PostMapping("/permissions")
    @PreAuthorize("@ck.hasPermit('auth:permission:add')")
    public ApiResponse<Permission> add(@Valid @RequestBody AddPermissionRequest request) {
        Permission entity = new Permission();
        BeanUtils.copyProperties(request, entity);

        // 计算排序
        if (request.getParentId() != null) {
            Integer sort = permissionMapper.selectMaxSort(request.getParentId());
            entity.setSort(sort == null ? 1 : sort + 1);
        }

        boolean success = thisService.save(entity);
        if (success) {
            return new ApiResponse<>(entity);
        }
        return new ApiResponse<>("新增失败", false);
    }


    /**
     * 按ID查询权限
     *
     * @param permissionId 权限ID
     */
    @GetMapping("/permissions/{permissionId}")
    @PreAuthorize("@ck.hasPermit('auth:permission:get')")
    public ApiResponse<Permission> get(@PathVariable Long permissionId) {
        Permission entity = thisService.getById(permissionId);
        if (entity == null) {
            return new ApiResponse<>("权限不存在", false);
        }
        return new ApiResponse<>(entity);
    }

    /**
     * 按ID更新权限
     *
     * @param permissionId 权限ID
     */
    @PutMapping("/permissions/{permissionId}")
    @PreAuthorize("@ck.hasPermit('auth:permission:update')")
    public ApiResponse<Object> update(@Valid @RequestBody Permission entity, @PathVariable Long permissionId) {
        Permission permission = thisService.getById(permissionId);
        entity.setId(permissionId);
        boolean success = thisService.updateById(entity);
        if (success) {
            List<Long> users = thisService.holdPermission(permission.getCode());
            users.forEach(userId -> thisService.refreshPermissions(userId));
            return new ApiResponse<>("更新成功");
        }
        return new ApiResponse<>("更新失败", false);
    }

    /**
     * 按ID删除权限
     *
     * @param permissionId 权限ID
     */
    @DeleteMapping("/permissions/{permissionId}")
    @PreAuthorize("@ck.hasPermit('auth:permission:delete')")
    public ApiResponse<Object> delete(@PathVariable Long permissionId) {
        if (thisService.isAlreadyUsed(permissionId)) {
            return new ApiResponse<>("删除失败，该权限正在使用", false);
        }

        Permission permission = thisService.getById(permissionId);
        boolean success = thisService.delete(permissionId);
        if (success) {
            // 所有持有该权限的用户，都刷新权限
            List<Long> users = thisService.holdPermission(permission.getCode());
            users.forEach(userId -> thisService.refreshPermissions(userId));
            return new ApiResponse<>("删除成功");
        }
        return new ApiResponse<>("删除失败", false);
    }
}
