// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.auth.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.request.ListAuthRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.user.AdminAddUserRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.user.UpdateUserRequest;
import {{ cookiecutter.basePackage }}.biz.auth.response.UserResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.biz.sys.service.ISettingService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.response.R;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 用户管理
 */
@RestController
@RequestMapping("/auth")
public class UserController extends AuthBaseController {

    ISettingService setting;

    PasswordEncoder encoder;

    IUserService thisService;

    public UserController(ISettingService setting, PasswordEncoder encoder, IUserService thisService) {
        this.encoder = encoder;
        this.thisService = thisService;
        this.setting = setting;
    }

    /**
     * 分页查询用户列表
     */
    @PreAuthorize("@ck.hasPermit('auth:user:list')")
    @GetMapping("/users")
    public R<PageVO<UserResponse>> list(@Valid ListAuthRequest request) {
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.select("id, username, email, mobile, enabled");
        if (StringUtils.isNotBlank(request.getKeyword())) {
            wrapper.and(i -> i.like("username", request.getKeyword())
                    .or().like("email", request.getKeyword())
                    .or().like("mobile", request.getKeyword())
                    .or().like("nickname", request.getKeyword()));
        }

        // 不能将没有权限的用户信息返回
        List<Long> members = thisService.getAllChildren(getUserId());
        wrapper.in("id", members);

        wrapper.eq(request.getEnabled() != null, "enabled", request.getEnabled());
        IPage<User> page = PageRequestUtil.checkForMp(request);
        IPage<User> list = thisService.page(page, wrapper);

        // 增加角色和组信息
        List<UserResponse> userResponses = list.getRecords().stream()
                .map(user -> thisService.attachUserInfo(user, request.isFull())).collect(Collectors.toList());
        return R.ok(new PageVO<>(userResponses, list.getTotal()));
    }


    /**
     * 使用用户名创建用户
     */
    @PreAuthorize("@ck.hasPermit('auth:user:add')")
    @PostMapping("/users")
    public R<User> add(@Valid @RequestBody AdminAddUserRequest request) {
        if (thisService.queryByAccount(request.getAccount()) != null) {
            return R.fail("创建失败，账号已存在");
        }

        // 构建用户
        User user = thisService.create(request.getAccount(), encoder.encode(request.getPassword()));
        Boolean isReset = setting.get("auth.user.reset").getBool();
        user.setMustChangePwd((request.isMustChangePwd() && isReset) ? 1 : 0);
        boolean success = thisService.save(user);
        if (!success) {
            return R.fail("创建用户失败");
        }

        List<Long> roleIds = new ArrayList<>();
        if (CollectionUtils.isEmpty(request.getRoleIds())) {
            Long defaultRole = setting.get("auth.user.default-role").getLongValue();
            roleIds.add(defaultRole);
        } else {
            roleIds.addAll(request.getRoleIds());
        }
        // 更新用户角色、用户组关联关系, 防止被授予过高的权限的角色
        thisService.updateRelation(user.getId(), roleIds, request.getGroupIds(), null);
        return R.ok(user);
    }

    /**
     * 更新用户信息
     *
     * @param userId 用户ID
     */
    @PreAuthorize("@ck.hasPermit('auth:user:update')")
    @PutMapping("/users/{userId}")
    public R<Object> update(@PathVariable Long userId, @Valid @RequestBody UpdateUserRequest request) {
        if (!groupService.isAllowed(getUserId(), userId, null)) {
            return R.fail("没有权限更新用户");
        }

        // 需要防止赋予比操作者更高的权限
        thisService.updateRelation(userId, request.getRoleIds(), request.getGroupIds(), request.getPermissionIds());
        return R.ok("更新用户成功");
    }


    /**
     * 按ID查询用户
     *
     * @param userId 用户ID
     */
    @LogOperation("按ID查询用户")
    @PreAuthorize("@ck.hasPermit('auth:user:get')")
    @GetMapping("/users/{userId}")
    public R<UserResponse> get(@PathVariable Long userId) {
        if (!groupService.isAllowed(getUserId(), userId, null)) {
            return R.fail("没有权限查询该用户");
        }

        User user = thisService.queryById(userId);
        if (user != null) {
            return R.ok(thisService.attachUserInfo(user, true));
        }
        return R.fail("用户不存在");
    }

    /**
     * 按ID删除用户
     *
     * @param userId 用户ID
     */
    @LogOperation("按ID删除用户")
    @PreAuthorize("@ck.hasPermit('auth:user:delete')")
    @DeleteMapping("/users/{userId}")
    public R<Object> delete(@PathVariable Long userId) {
        if (userId.equals(getUserId())) {
            return R.fail("不能删除自己");
        }

        // 不能删除其他组的用户
        if (!groupService.isAllowed(getUserId(), userId, null)) {
            return R.fail("没有权限删除该用户");
        }

        boolean success = thisService.delete(userId);
        return success ? R.ok("已成功删除该用户") : R.fail("删除用户失败");
    }

    /**
     * 禁用用户
     *
     * @param userId 用户ID
     */
    @LogOperation("禁用用户")
    @PreAuthorize("@ck.hasPermit('auth:user:disable')")
    @PutMapping("/users/{userId}/disable")
    public R<Object> disable(@PathVariable Long userId) {
        if (userId.equals(getUserId())) {
            return R.fail("不能禁用自己");
        }

        // 不能禁用其他组的用户
        if (!groupService.isAllowed(getUserId(), userId, null)) {
            return R.fail("没有权限禁用该用户");
        }

        boolean success = thisService.disable(userId);
        return success ? R.ok("已成功禁用该用户") : R.fail("禁用用户失败");
    }

    /**
     * 启用用户
     *
     * @param userId 用户ID
     */
    @LogOperation("启用用户")
    @PreAuthorize("@ck.hasPermit('auth:user:enable')")
    @PutMapping("/users/{userId}/enable")
    public R<Object> enable(@PathVariable Long userId) {
        if (!groupService.isAllowed(getUserId(), userId, null)) {
            return R.fail("没有权限启用用户");
        }

        boolean success = thisService.enable(userId);
        return success ? R.ok("已成功启用该用户") : R.fail("启用用户失败");
    }


    /**
     * 下线用户
     *
     * @param userId 用户ID
     */
    @LogOperation("下线用户")
    @PreAuthorize("@ck.hasPermit('auth:user:kick')")
    @PutMapping("/users/{userId}/kick")
    public R<Object> kick(@PathVariable Long userId) {
        if (userId.equals(getUserId())) {
            return R.fail("不能将自己下线");
        }

        if (!groupService.isAllowed(getUserId(), userId, null)) {
            return R.fail("没有权限下线用户");
        }

        boolean success = thisService.kick(userId);
        return success ? R.ok("下线用户成功") : R.fail("下线用户失败");
    }
}
