// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Group;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserGroup;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.UserGroupMapper;
import {{ cookiecutter.basePackage }}.biz.auth.request.BatchRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.ListAuthRequest;
import {{ cookiecutter.basePackage }}.biz.auth.service.IPermissionService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserGroupService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.request.PaginationRequest;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.response.R;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

/**
 * 用户与用户组关系管理
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/auth")
public class UserGroupController extends AuthBaseController {

    final IUserGroupService thisService;
    final IPermissionService permissionService;
    final UserGroupMapper userGroupMapper;

    /**
     * 分页查询用户所属用户组
     *
     * @param userId 用户ID
     */
    @Secured(value = "ROLE_admin")
    @GetMapping("/users/{userId}/groups")
    public R<PageVO<Group>> list(@Valid PaginationRequest request, @PathVariable Long userId) {
        IPage<Group> page = PageRequestUtil.checkForMp(request);
        IPage<Group> list = userGroupMapper.page(page, userId, request);
        return PageRequestUtil.extractFromMp(list);
    }


    /**
     * 用户添加到用户组
     *
     * @param userId 用户ID
     */
    @Secured(value = "ROLE_admin")
    @PostMapping("/users/{userId}/groups")
    public R<Void> add(@PathVariable Long userId, @Valid @RequestBody UserGroup entity) {
        boolean success = thisService.createRelation(userId, entity.getGroupId());
        if (success) {
            permissionService.refreshPermissions(userId);
            return R.ok("用户添加到用户组成功");
        }
        return R.fail("用户添加到用户组失败");
    }


    /**
     * 用户移出用户组
     *
     * @param userId  用户ID
     * @param groupId 用户组ID
     */
    @Secured(value = "ROLE_admin")
    @DeleteMapping("/users/{userId}/groups/{groupId}")
    public R<Void> delete(@PathVariable Long userId, @PathVariable Long groupId) {
        boolean success = thisService.deleteRelation(userId, groupId);
        if (success) {
            permissionService.refreshPermissions(userId);
            return R.ok("用户移出用户组成功");
        }
        return R.fail("用户移出用户组失败");
    }


    /**
     * 分页查询用户组下的用户
     *
     * @param groupId 用户组ID
     */
    @PreAuthorize("@ck.hasPermit('auth:group:get')")
    @GetMapping("/groups/{groupId}/users")
    public R<PageVO<User>> pageUser(@PathVariable Long groupId, @Valid ListAuthRequest request) {
        IPage<User> page = PageRequestUtil.checkForMp(request);
        // todo 需支持查询子用户组下的用户
        IPage<User> pageVo = userGroupMapper.pageUser(page, groupId, request);
        return PageRequestUtil.extractFromMp(pageVo);
    }

    /**
     * 用户批量移出用户组
     *
     * @param userId 用户ID
     */
    @Secured(value = "ROLE_admin")
    @PostMapping("/users/{userId}/groups/batch-delete")
    public R<Void> deleteBatch(@PathVariable Long userId, @Valid @RequestBody BatchRequest request) {
        List<Long> ids = request.getIds();
        boolean success = ids.stream()
                .allMatch(groupId -> thisService.deleteRelation(userId, groupId));

        return success ? R.ok("用户批量移出用户组成功") : R.fail("用户批量移出用户组失败");
    }

    /**
     * 用户批量添加到用户组
     *
     * @param userId 用户ID
     */
    @Secured(value = "ROLE_admin")
    @PostMapping("/users/{userId}/groups/batch-add")
    public R<Void> createBatch(@PathVariable Long userId, @Valid @RequestBody BatchRequest request) {
        List<Long> ids = request.getIds();
        boolean success = ids.stream()
                .allMatch(groupId -> thisService.createRelation(userId, groupId));

        return success ? R.ok("用户批量添加到用户组成功") : R.fail("用户批量添加到用户组失败");
    }

}
