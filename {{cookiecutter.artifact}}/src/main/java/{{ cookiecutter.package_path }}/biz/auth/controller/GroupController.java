// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import cn.hutool.core.lang.tree.Tree;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.auth.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.biz.auth.constant.AuthConst;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Group;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserGroup;
import {{ cookiecutter.basePackage }}.biz.auth.request.ListAuthRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.UpdateAuthRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.group.AddGroupRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.group.MigrateGroupRequest;
import {{ cookiecutter.basePackage }}.biz.auth.response.GroupResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.IGroupService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserGroupService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 用户组管理
 */
@RestController
@RequestMapping("/auth")
public class GroupController extends AuthBaseController {

    IUserGroupService userGroupService;

    IGroupService thisService;

    public GroupController(IGroupService thisService, IUserGroupService userGroupService) {
        this.thisService = thisService;
        this.userGroupService = userGroupService;
    }

    /**
     * 用户组查询
     */
    @PreAuthorize("@ck.hasPermit('auth:group:list')")
    @GetMapping("/groups")
    public ApiResponse<PageVO<GroupResponse>> list(@Valid ListAuthRequest request) {
        // 查询当前用户，所在用户组和所能管理的用户组
        QueryWrapper<Group> wrapper = new QueryWrapper<>();
        wrapper.in("id", thisService.getSubGroups(getUserId()));
        wrapper.like(StringUtils.isNotBlank(request.getKeyword()), "name", request.getKeyword());
        IPage<Group> page = PageRequestUtil.checkForMp(request);
        IPage<Group> list = thisService.page(page, wrapper);
        List<GroupResponse> collect = list.getRecords().stream()
                .map(group -> thisService.attachGroupInfo(group, request.isFull())).collect(Collectors.toList());
        return new ApiResponse<>(new PageVO<>(collect, list.getTotal()));
    }

    /**
     * 获取用户组树状结构
     *
     * @param rootId 根节点ID
     */
    @PreAuthorize("@ck.hasPermit('auth:group:tree')")
    @GetMapping("/groups/tree")
    public ApiResponse<List<Tree<Integer>>> tree(@RequestParam(defaultValue = "0") Integer rootId) {
        // 查询当前用户，所在用户组作为rootId
        QueryWrapper<UserGroup> wrapper = new QueryWrapper<>();
        wrapper.eq("user_id", getUserId());
        wrapper.eq("admin", AuthConst.ENABLED);
        List<UserGroup> list = userGroupService.list(wrapper);
        if (CollectionUtils.isNotEmpty(list)) {
            rootId = list.get(0).getGroupId().intValue();
        }

        List<Tree<Integer>> tree = thisService.getTree(rootId);
        return new ApiResponse<>(tree);
    }

    /**
     * 创建用户组
     */
    @PreAuthorize("@ck.hasPermit('auth:group:add')")
    @PostMapping("/groups")
    public ApiResponse<Object> add(@Valid @RequestBody AddGroupRequest request) {
        if (!thisService.isAllowed(getUserId(), null, request.getParentId())) {
            return new ApiResponse<>("无权限创建该用户组", false);
        }

        Group group = new Group();
        BeanUtils.copyProperties(request, group);
        Group result = thisService.create(group);
        if (result != null) {
            thisService.updateRelation(result.getId(), request.getRoleIds(), request.getPermissionIds());
            return new ApiResponse<>(result);
        }
        return new ApiResponse<>("创建用户组失败", false);
    }

    /**
     * 按ID查询用户组
     *
     * @param groupId 用户组ID
     */
    @LogOperation("按ID查询用户组")
    @PreAuthorize("@ck.hasPermit('auth:group:get')")
    @GetMapping("/groups/{groupId}")
    public ApiResponse<GroupResponse> get(@PathVariable Long groupId) {
        if (!thisService.isAllowed(getUserId(), null, groupId)) {
            return new ApiResponse<>("无权限查询该用户组", false);
        }

        Group group = thisService.getById(groupId);
        return new ApiResponse<>(thisService.attachGroupInfo(group, true));
    }

    /**
     * 按ID更新用户组
     *
     * @param groupId 用户组ID
     */
    @LogOperation("按ID更新用户组")
    @PreAuthorize("@ck.hasPermit('auth:group:update')")
    @PutMapping("/groups/{groupId}")
    public ApiResponse<Group> update(@PathVariable Long groupId, @Valid @RequestBody UpdateAuthRequest request) {
        if (!thisService.isAllowed(getUserId(), null, groupId)) {
            return new ApiResponse<>("无权限更新该用户组", false);
        }

        // FIXME 同级用户组名称不能重复
        Group group = new Group();
        BeanUtils.copyProperties(request, group);
        group.setId(groupId);
        thisService.updateById(group);
        thisService.updateRelation(groupId, request.getRoleIds(), request.getPermissionIds());
        return new ApiResponse<>(thisService.getById(groupId));
    }

    /**
     * 按ID删除用户组
     *
     * @param groupId 用户组ID
     */
    @LogOperation("按ID删除用户组")
    @PreAuthorize("@ck.hasPermit('auth:group:delete')")
    @DeleteMapping("/groups/{groupId}")
    public ApiResponse<Object> delete(@PathVariable Long groupId) {
        if (!thisService.isAllowed(getUserId(), null, groupId)) {
            return new ApiResponse<>("无权限删除该用户组", false);
        }

        // 判断该用户组下是否有子用户组
        if (thisService.isAlreadyUsed(groupId)) {
            return new ApiResponse<>("该用户组下还存在子用户组", false);
        }

        boolean success = thisService.delete(groupId);
        return new ApiResponse<>("删除用户组成功.", success);
    }

    /**
     * 用户组迁移
     */
    @PreAuthorize("@ck.hasPermit('auth:group:migrate')")
    @PostMapping("/groups/migrate")
    public ApiResponse<Object> migrate(@Valid @RequestBody MigrateGroupRequest request) {
        if (!isSubGroup(request.getParentId()) || !isSubGroup(request.getCurrentId())) {
            return new ApiResponse<>("无权限移动到该用户组", false);
        }

        Group group = new Group();
        group.setId(request.getCurrentId());
        group.setParentId(request.getParentId());
        boolean success = thisService.updateById(group);
        return new ApiResponse<>("移动用户组成功.", success);
    }
}
