// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import {{ cookiecutter.basePackage }}.biz.auth.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Profile;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.service.IProfileService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

/**
 * 用户资料管理
 */
@RestController
@RequestMapping("/auth")
@RequiredArgsConstructor
public class ProfileController extends AuthBaseController {

    final IProfileService thisService;
    final IUserService userService;

    /**
     * 获取当前用户资料
     */
    @LogOperation("获取当前用户资料")
    @PreAuthorize("@ck.hasPermit('auth:profile:get')")
    @GetMapping("/profile")
    public R<Profile> get() {
        Long userId = getUserId();
        return R.ok(thisService.queryByUserId(userId));
    }

    /**
     * 更新当前用户资料
     */
    @LogOperation("更新当前用户资料")
    @PreAuthorize("@ck.hasPermit('auth:profile:update')")
    @PutMapping("/profile")
    public R<Profile> update(@Valid @RequestBody Profile entity) {
        Long userId = getUserId();
        entity.setUserId(userId);
        Profile profile = thisService.updateProfile(entity);

        // 更新auth_user中的nickname
        if (StringUtils.isNotBlank(entity.getNickname())) {
            User user = new User();
            user.setId(userId);
            user.setNickname(entity.getNickname());
            userService.updateById(user);
        }
        return R.ok(profile);
    }
}
