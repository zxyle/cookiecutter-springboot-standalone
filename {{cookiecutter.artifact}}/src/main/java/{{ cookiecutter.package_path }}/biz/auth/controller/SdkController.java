// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import {{ cookiecutter.basePackage }}.biz.auth.constant.AuthConst;
import {{ cookiecutter.basePackage }}.biz.auth.entity.OpenApi;
import {{ cookiecutter.basePackage }}.biz.auth.request.SdkRequest;
import {{ cookiecutter.basePackage }}.biz.auth.security.WildcardPermission;
import {{ cookiecutter.basePackage }}.biz.auth.service.IOpenApiService;
import {{ cookiecutter.basePackage }}.biz.auth.util.JwtUtil;
import {{ cookiecutter.basePackage }}.biz.auth.util.ObjectToHashMap;
import {{ cookiecutter.basePackage }}.biz.auth.util.SignUtils;
import io.jsonwebtoken.Claims;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * SDK接口
 */
@Slf4j
@RestController
@RequestMapping("/auth/sdk")
public class SdkController {

    private final WildcardPermission wildcardPermission = new WildcardPermission();

    @Resource
    StringRedisTemplate stringRedisTemplate;

    @Autowired
    HttpServletRequest servletRequest;

    @Autowired
    IOpenApiService openApiService;

    /**
     * 获取用户ID
     */
    @PostMapping("/parseToken")
    public Long parseToken(@Valid @RequestBody SdkRequest request) {
        if (!before(request)) {
            return null;
        }

        String userId = parseUserId(request.getToken());
        return StringUtils.isBlank(userId) ? null : Long.parseLong(userId);
    }

    /**
     * 判断用户是否登录
     */
    @PostMapping("/isLogin")
    public boolean isLogin(@Valid @RequestBody SdkRequest request) {
        if (!before(request)) {
            return false;
        }

        String userId = parseUserId(request.getToken());
        if (StringUtils.isBlank(userId))
            return false;

        String key = AuthConst.KEY_PREFIX + userId;
        return Boolean.TRUE.equals(stringRedisTemplate.hasKey(key));
    }

    /**
     * 判断用户是否有权限
     *
     * @return true-有权限，false-无权限
     */
    @PostMapping("/allowed")
    public boolean allowed(@Valid @RequestBody SdkRequest request) {
        if (!before(request)) {
            return false;
        }

        String permission = request.getPermission();
        String userId = parseUserId(request.getToken());
        String key = AuthConst.KEY_PREFIX + userId;
        String value = stringRedisTemplate.opsForValue().get(key);
        if (StringUtils.isBlank(value))
            return false;

        List<String> patterns = Arrays.asList(value.split(AuthConst.DELIMITER));
        boolean result = wildcardPermission.isPermit(permission, patterns);
        log.info("permission: " + permission + ", result: " + result);
        return result;
    }

    public String parseUserId(String token) {
        try {
            Claims claims = JwtUtil.parseJWT(token);
            return claims.getSubject();
        } catch (Exception ignored) {
            log.error("解析token失败，token: {}", token);
            return null;
        }
    }

    public boolean before(SdkRequest request) {
        OpenApi openApi = openApiService.getValidOpenApi(request.getAppId());
        if (openApi == null) {
            log.info("appId: {} 不存在或已过期", request.getAppId());
            return false;
        }

        Map<String, String> map = ObjectToHashMap.convertObjectToHashMap(request);
        map.put("appSecret", openApi.getAppSecret());
        if (!SignUtils.isCorrect(map)) {
            log.info("appId: {} 签名错误", request.getAppId());
            return false;
        }

        String token = request.getToken();
        String userId = parseUserId(token);
        if (StringUtils.isBlank(userId)) {
            log.info("token: {} 无效", token);
            return false;
        }

        return true;
    }

}
