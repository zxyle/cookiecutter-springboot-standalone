// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Role;
import {{ cookiecutter.basePackage }}.biz.auth.request.ListAuthRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.role.AddRoleRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.role.UpdateRoleRequest;
import {{ cookiecutter.basePackage }}.biz.auth.response.RoleResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.IPermissionService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IRoleService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import {{ cookiecutter.basePackage }}.common.response.PageVO;
import {{ cookiecutter.basePackage }}.common.util.PageRequestUtil;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 角色管理
 */
@RestController
@RequestMapping("/auth")
public class RoleController extends AuthBaseController {

    IRoleService thisService;

    IPermissionService permissionService;

    public RoleController(IRoleService thisService, IPermissionService permissionService) {
        this.thisService = thisService;
        this.permissionService = permissionService;
    }

    /**
     * 角色列表分页查询
     */
    @GetMapping("/roles")
    @PreAuthorize("@ck.hasPermit('auth:role:list')")
    public ApiResponse<PageVO<RoleResponse>> list(@Valid ListAuthRequest request) {
        QueryWrapper<Role> wrapper = new QueryWrapper<>();
        wrapper.select("id, name, code, description");
        // 模糊查询
        wrapper.like(StringUtils.isNotBlank(request.getKeyword()), "name", request.getKeyword());
        IPage<Role> page = PageRequestUtil.checkForMp(request);
        IPage<Role> list = thisService.page(page, wrapper);
        List<RoleResponse> collect = list.getRecords().stream()
                .map(role -> thisService.attachRoleInfo(role, request.isFull())).collect(Collectors.toList());
        return new ApiResponse<>(new PageVO<>(collect, list.getTotal()));
    }

    /**
     * 获取所有角色
     */
    @GetMapping("/roles/all")
    @PreAuthorize("@ck.hasPermit('auth:role:all')")
    public ApiResponse<List<RoleResponse>> all() {
        List<Role> roles = thisService.list();

        // 查询角色对应权限关系
        List<RoleResponse> list = roles.stream()
                .map(role -> thisService.attachRoleInfo(role, true)).collect(Collectors.toList());
        return new ApiResponse<>(list);
    }


    /**
     * 创建角色
     */
    @PostMapping("/roles")
    @PreAuthorize("@ck.hasPermit('auth:role:add')")
    public ApiResponse<Role> add(@Valid @RequestBody AddRoleRequest request) {
        Role role = new Role();
        BeanUtils.copyProperties(request, role);
        boolean success = thisService.save(role);
        if (success && CollectionUtils.isNotEmpty(request.getPermissionIds())) {
            // 保存角色权限关系
            thisService.updateRelation(role.getId(), request.getPermissionIds());
        }
        return new ApiResponse<>(role);
    }


    /**
     * 按ID查询角色
     *
     * @param roleId 角色ID
     */
    @GetMapping("/roles/{roleId}")
    @PreAuthorize("@ck.hasPermit('auth:role:get')")
    public ApiResponse<RoleResponse> get(@PathVariable Long roleId) {
        Role role = thisService.queryById(roleId);
        if (role == null) {
            return new ApiResponse<>("角色不存在", false);
        }

        // 查询角色对应权限关系
        RoleResponse response = thisService.attachRoleInfo(role, true);
        return new ApiResponse<>(response);
    }

    /**
     * 按ID更新角色
     *
     * @param roleId 角色ID
     */
    @PutMapping("/roles/{roleId}")
    @PreAuthorize("@ck.hasPermit('auth:role:update')")
    public ApiResponse<Object> update(@Valid @RequestBody UpdateRoleRequest request, @PathVariable Long roleId) {
        // 更新角色信息
        Role role = new Role();
        BeanUtils.copyProperties(request, role);
        role.setId(roleId);
        boolean success = thisService.updateById(role);

        // 更新角色权限关系
        if (success && CollectionUtils.isNotEmpty(request.getPermissionIds())) {
            // 更新角色权限关联关系
            thisService.updateRelation(roleId, request.getPermissionIds());

            // 刷新持有该角色的用户权限缓存
            List<Long> users = getUsersByRole(roleId);
            users.forEach(userId -> permissionService.refreshPermissions(userId));
        }
        return new ApiResponse<>("更新角色成功");
    }

    /**
     * 按ID删除角色
     *
     * @param roleId 角色ID
     */
    @DeleteMapping("/roles/{roleId}")
    @PreAuthorize("@ck.hasPermit('auth:role:delete')")
    public ApiResponse<Object> delete(@PathVariable Long roleId) {
        if (thisService.isAlreadyUsed(roleId)) {
            return new ApiResponse<>("该角色已被使用，无法删除", false);
        }

        boolean success = thisService.delete(roleId);
        if (success) {
            // 刷新持有该角色的用户权限缓存
            List<Long> users = getUsersByRole(roleId);
            users.forEach(userId -> permissionService.refreshPermissions(userId));
            return new ApiResponse<>("删除角色成功");
        }

        return new ApiResponse<>("删除角色失败", false);
    }
}
