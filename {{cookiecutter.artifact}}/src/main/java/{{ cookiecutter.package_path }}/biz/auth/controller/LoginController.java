// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import {{ cookiecutter.basePackage }}.biz.auth.constant.AuthConst;
import {{ cookiecutter.basePackage }}.biz.auth.request.login.LoginRequest;
import {{ cookiecutter.basePackage }}.biz.auth.response.LoginResponse;
import {{ cookiecutter.basePackage }}.biz.auth.security.CaptchaProperties;
import {{ cookiecutter.basePackage }}.biz.auth.security.LoginUser;
import {{ cookiecutter.basePackage }}.biz.auth.service.CodeService;
import {{ cookiecutter.basePackage }}.biz.auth.service.LoginService;
import {{ cookiecutter.basePackage }}.biz.auth.util.JwtUtil;
import {{ cookiecutter.basePackage }}.biz.sys.entity.LoginLog;
import {{ cookiecutter.basePackage }}.biz.sys.service.ILoginLogService;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import {{ cookiecutter.basePackage }}.common.util.IpUtil;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.HttpHeaders;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.Objects;

/**
 * 登录管理
 */
@RestController
@RequestMapping("/auth/user")
@RequiredArgsConstructor(onConstructor_ = {@Autowired})
public class LoginController {

    final StringRedisTemplate stringRedisTemplate;

    final ILoginLogService loginLogService;

    final LoginService loginService;

    final AuthenticationManager authenticationManager;

    final CaptchaProperties captchaProperties;

    final CodeService codeService;


    /**
     * 用户登录
     *
     * @param request 用户信息
     * @apiNote 通过用户名/邮箱/手机号和密码进行用户登录
     */
    @PostMapping("/login")
    public ApiResponse<LoginResponse> login(@Valid @RequestBody LoginRequest request, HttpServletRequest servletRequest) {
        String principal = request.getPrincipal();
        ApiResponse<LoginResponse> beforeLoginResponse = beforeLogin(request);
        if (beforeLoginResponse != null) {
            return beforeLoginResponse;
        }

        // 登录日志
        LoginLog loginLog = new LoginLog();
        loginLog.setUa(servletRequest.getHeader(HttpHeaders.USER_AGENT));
        loginLog.setIp(IpUtil.getIpAddr(servletRequest));
        loginLog.setLoginName(principal);

        UsernamePasswordAuthenticationToken authenticationToken =
                new UsernamePasswordAuthenticationToken(principal, request.getPassword());
        // AuthenticationManager authenticate进行用户认证
        Authentication authenticate = authenticationManager.authenticate(authenticationToken);
        if (Objects.isNull(authenticate)) {
            String error = "用户名或密码错误";
            loginLog.setMsg(error);
            // loginLogService.save(loginLog);
            throw new RuntimeException(error);
        }

        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();
        String userId = loginUser.getUser().getId().toString();
        String jwt = JwtUtil.createJWT(userId);

        LoginResponse response = new LoginResponse();
        response.setToken(jwt);
        response.setUsername(loginUser.getUser().getLoginName());
        response.setIsSuper(loginUser.getUser().getIsSuper());
        loginLog.setMsg("登录成功");
        loginLog.setIsSuccess(AuthConst.SUCCESS);
        // TODO 改成异步插入
        // loginLogService.save(loginLog);
        return new ApiResponse<>(response);
    }

    /**
     * 退出登录
     */
    @PostMapping("/logout")
    public ApiResponse<Object> logout() {
        boolean success = loginService.logout();
        return new ApiResponse<>(success);
    }

    /**
     * 登录前条件判断
     */
    public ApiResponse<LoginResponse> beforeLogin(LoginRequest request) {
        // 登录日志

        if (StringUtils.isBlank(request.getPrincipal())) {
            return new ApiResponse<>("无主账号信息", false);
        }

        // 验证码校验
        if (captchaProperties.isOn()) {
            boolean verify = codeService.verify(request.getCode(), request.getCaptchaId());
            if (!verify) {
                return new ApiResponse<>("验证码错误", false);
            }
        }
        return null;
    }

    // 登录之后
    public void afterLogin() {

    }

}
