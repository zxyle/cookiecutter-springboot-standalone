// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import {{ cookiecutter.basePackage }}.biz.auth.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.request.login.LoginRequest;
import {{ cookiecutter.basePackage }}.biz.auth.response.LoginResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.CodeService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.biz.auth.service.LoginService;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.time.LocalDateTime;

/**
 * 登录管理
 */
@Slf4j
@RestController
@RequestMapping("/auth/user")
@RequiredArgsConstructor(onConstructor_ = {@Autowired})
public class LoginController extends AuthBaseController {

    final IUserService userService;

    final LoginService loginService;

    final CodeService codeService;


    /**
     * 用户登录
     *
     * @param request 用户信息
     * @apiNote 通过用户名/邮箱/手机号和密码进行用户登录
     */
    @PostMapping("/login")
    public R<LoginResponse> login(@Valid @RequestBody LoginRequest request, HttpServletRequest servletRequest) {
        log.debug("用户登录：{}", servletRequest.getRequestURI());
        R<LoginResponse> beforeLoginResponse = beforeLogin(request);
        if (beforeLoginResponse != null) {
            return beforeLoginResponse;
        }

        LoginResponse response = loginService.login(request.getAccount(), request.getPassword());

        // 用户初次登录后，需要在24小时内修改密码，否则到期后无法登录
        if (response.isMustChangePwd()) {
            response.setMustChangePwd(true);
            userService.markExpired(response.getUserId(), LocalDateTime.now().plusHours(24));
        }

        afterLogin(response.getUserId());
        return R.ok(response);
    }

    /**
     * 退出登录
     */
    @LogOperation("退出登录")
    @PreAuthorize("@ck.hasPermit('auth:user:logout')")
    @PostMapping("/logout")
    public R<Object> logout() {
        boolean success = loginService.logout(getUserId());
        return R.result(success);
    }

    /**
     * 登录前条件判断
     */
    public R<LoginResponse> beforeLogin(LoginRequest request) {
        // 验证码校验
        boolean verify = codeService.verify(request.getCode(), request.getCaptchaId());
        if (!verify) {
            return R.fail("验证码可能错误或过期");
        }
        return null;
    }

    /**
     * 登录后操作
     */
    @Async
    public void afterLogin(Long userId) {
        // 更新用户最后登录时间
        User user = new User();
        user.setId(userId);
        user.setLastLoginTime(LocalDateTime.now());
        userService.updateById(user);
    }

}
