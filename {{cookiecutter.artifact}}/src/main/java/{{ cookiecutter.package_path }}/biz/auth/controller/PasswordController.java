// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.request.password.ChangeByOldRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.password.ForgetRequest;
import {{ cookiecutter.basePackage }}.biz.auth.request.password.RandomRequest;
import {{ cookiecutter.basePackage }}.biz.auth.response.ResetPasswordResponse;
import {{ cookiecutter.basePackage }}.biz.auth.security.PasswordProperties;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.biz.auth.service.LoginService;
import {{ cookiecutter.basePackage }}.biz.auth.util.PasswordChecker;
import {{ cookiecutter.basePackage }}.biz.sys.util.CaptchaUtil;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.util.Map;

/**
 * 密码管理
 */
@RestController
@RequestMapping("/auth/password")
@Slf4j
public class PasswordController extends AuthBaseController {

    @Autowired
    PasswordProperties passwordProperties;

    IUserService userService;

    PasswordEncoder passwordEncoder;

    LoginService loginService;

    @Resource
    StringRedisTemplate stringRedisTemplate;

    public PasswordController(PasswordEncoder passwordEncoder, LoginService loginService, IUserService userService) {
        this.passwordEncoder = passwordEncoder;
        this.loginService = loginService;
        this.userService = userService;
    }

    /**
     * 使用旧密码方式修改密码
     */
    @PostMapping("/change")
    public ApiResponse<Object> change(@Valid @RequestBody ChangeByOldRequest request) {
        User user = getLoggedInUser();

        if (null != user && passwordEncoder.matches(request.getOldPassword(), user.getPwd())) {
            boolean isChanged = userService.changePwd(user.getId(), passwordEncoder.encode(request.getNewPassword()));
            // 退出当前登录状态
            boolean isLoggedOut = loginService.logout();
            return new ApiResponse<>(isChanged && isLoggedOut);
        }

        return new ApiResponse<>("修改密码失败，旧密码可能不正确。", false);
    }

    /**
     * 忘记/找回/重置密码（通过短信或邮件验证码）
     */
    @PostMapping("/forget")
    public ApiResponse<Object> forget(@Valid @RequestBody ForgetRequest request) {
        boolean success;
        String key = "code:" + request.getPrincipal();
        Map<Object, Object> entries = stringRedisTemplate.opsForHash().entries(key);
        String code = (String) entries.get("code");
        String principal = (String) entries.get("principal");

        Long userId = Long.valueOf(String.valueOf(entries.get("userId")));
        if (StringUtils.isNotBlank(code) && request.getCode().equalsIgnoreCase(code)) {
            success = userService.changePwd(userId, passwordEncoder.encode(request.getNewPassword()));
            Boolean isDeleted = stringRedisTemplate.delete(key);
            log.info("{} 修改密码成功.", principal);
            return new ApiResponse<>(success && Boolean.TRUE.equals(isDeleted));
        }

        return new ApiResponse<>("找回密码失败", false);
    }

    /**
     * 重置密码（支持系统管理员、组管理员重置密码）
     *
     * @param userId 用户ID
     */
    @Secured({"ROLE_admin", "ROLE_group-admin"})
    @PostMapping("/reset")
    public ApiResponse<ResetPasswordResponse> reset(@NotNull Long userId) {
        String rawPassword = CaptchaUtil.randCode(passwordProperties.getMinLength(), passwordProperties.getChars());
        boolean success = userService.changePwd(userId, passwordEncoder.encode(rawPassword));

        if (success) {
            // 退出当前登录状态
            loginService.logout();
            return new ApiResponse<>(new ResetPasswordResponse(rawPassword));
        }
        return new ApiResponse<>("重置密码失败", false);
    }


    /**
     * 密码复杂度
     *
     * @param password 待检测密码
     */
    @GetMapping("/complexity")
    public ApiResponse<Integer> complexity(@NotBlank String password) {
        int score = PasswordChecker.checkPasswordComplexity(password);
        return new ApiResponse<>(score);
    }


    /**
     * 随机生成密码
     */
    @GetMapping("/random")
    public ApiResponse<String> random(RandomRequest request) {
        String s = CaptchaUtil.randCode(request.getLength(), request.getChars());
        return new ApiResponse<>(s);
    }

}
