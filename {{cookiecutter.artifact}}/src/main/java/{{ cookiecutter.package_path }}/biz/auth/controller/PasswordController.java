// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import {{ cookiecutter.basePackage }}.biz.auth.aspect.LogOperation;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.enums.ChangePasswordEnum;
import {{ cookiecutter.basePackage }}.biz.auth.request.password.*;
import {{ cookiecutter.basePackage }}.biz.auth.response.password.PasswordComplexityResponse;
import {{ cookiecutter.basePackage }}.biz.auth.response.password.ResetPasswordResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.IPasswordService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.biz.auth.service.LoginService;
import {{ cookiecutter.basePackage }}.biz.auth.service.ValidateService;
import {{ cookiecutter.basePackage }}.common.util.AccountUtil;
import {{ cookiecutter.basePackage }}.biz.auth.util.PasswordChecker;
import {{ cookiecutter.basePackage }}.biz.sys.service.ISettingService;
import {{ cookiecutter.basePackage }}.biz.sys.util.CaptchaUtil;
import {{ cookiecutter.basePackage }}.common.controller.AuthBaseController;
import {{ cookiecutter.basePackage }}.common.response.R;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * 密码管理
 */
@RestController
@RequestMapping("/auth/password")
@Slf4j
@RequiredArgsConstructor
public class PasswordController extends AuthBaseController {

    final StringRedisTemplate stringRedisTemplate;
    final IUserService userService;
    final ISettingService setting;
    final IPasswordService thisService;
    final LoginService loginService;
    final ValidateService validateService;

    /**
     * 使用旧密码方式修改密码
     */
    @PreAuthorize("@ck.hasPermit('auth:password:change')")
    @PostMapping("/change")
    public R<Object> change(@Valid @RequestBody ChangeByOldRequest request) {
        User user = getLoggedInUser();

        if (thisService.isRight(request.getOldPassword(), user.getPwd())) {
            // 判断新密码是否和旧密码一致
            if (!setting.get("pwd.enable-same").getBool() && thisService.isRight(request.getNewPassword(), user.getPwd())) {
                return R.fail("修改失败，密码不符合规则");
            }

            boolean success = thisService.change(user.getId(), request.getNewPassword(), ChangePasswordEnum.CHANGE);
            // 退出当前登录状态
            boolean isLoggedOut = loginService.logout(user.getId());
            return R.result(success && isLoggedOut);
        }

        // 如果有人通过此接口反复尝试爆破旧密码，这里会记录尝试次数，超过一定次数后会锁定用户，提示用户被锁定，联系管理员解锁
        // 并记录日志，用户通过管理员重置密码或自行找回密码
        String key = "pwd:change:" + user.getId();
        Long times = stringRedisTemplate.opsForValue().increment(key);
        int retryTime = times == null ? 1 : times.intValue();
        Integer maxRetry = setting.get("pwd.change-max-retry-times").getIntValue();
        if (maxRetry > retryTime) {
            Integer remainTime = maxRetry - retryTime;
            String message = String.format("修改失败，旧密码可能不正确，还可重试%d次", remainTime);
            return R.fail(message);
        }

        userService.locked(user.getId());
        return R.fail("尝试次数过多，账号已被锁定，请联系管理员");
    }

    /**
     * 忘记/找回密码（通过短信或邮件验证码方式）
     */
    @PostMapping("/forget")
    public R<Object> forget(@Valid @RequestBody ForgetRequest request) {
        String account = request.getAccount();
        String key = "code:" + account;
        if (!validateService.validate(key, request.getCode())) {
            return R.fail("找回密码失败，验证码可能已过期或错误");
        }

        // 获取用户ID
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.eq(AccountUtil.isEmail(account), "email", account);
        wrapper.eq(AccountUtil.isMobile(account), "mobile", account);
        User user = userService.getOne(wrapper);
        if (null == user) {
            return R.fail("找回密码失败，用户不存在");
        }

        // 修改密码
        boolean success = thisService.change(user.getId(), request.getNewPassword(), ChangePasswordEnum.FORGET);
        if (!success) {
            return R.fail("找回密码失败");
        }
        // 用户可能已经在某处登录，退出登录
        loginService.logout(user.getId());
        userService.unlock(user.getId());
        return R.ok("找回密码成功, 请重新登录");
    }

    /**
     * 重置密码（支持系统管理员、用户组管理员重置密码）
     */
    @LogOperation("重置密码")
    @PreAuthorize("@ck.hasPermit('auth:password:reset')")
    @Secured({"ROLE_admin", "ROLE_group-admin"})
    @PostMapping("/reset")
    public R<ResetPasswordResponse> reset(@Valid @RequestBody ResetPasswordRequest request) {
        if (!groupService.isAllowed(getUserId(), request.getUserId(), null)) {
            return R.fail("重置密码失败，没有权限");
        }

        // 考虑新密码来源 1.前端用户传入 2.后端随机生成 3.系统配置(需以明文保存，不安全)
        Long userId = request.getUserId();
        String rawPassword = request.getPassword();
        rawPassword = StringUtils.isBlank(rawPassword) ?
                CaptchaUtil.randCode(setting.get("pwd.min-length").getIntValue(), setting.get("pwd.chars").getStr()) : rawPassword;
        boolean success = thisService.change(userId, rawPassword, ChangePasswordEnum.RESET);

        if (success) {
            // 退出当前登录状态
            loginService.logout(userId);
            userService.unlock(userId);
            return R.ok(new ResetPasswordResponse(rawPassword));
        }
        return R.fail("重置密码失败");
    }


    /**
     * 初次登录后修改密码
     */
    @PostMapping("/init")
    public R<Object> init(@RequestBody InitPasswordRequest request) {
        User user = getLoggedInUser();

        // 初次登录，最后登录时间在1分钟内，不需要校验旧密码, 直接修改密码
        Duration duration = Duration.between(user.getLastLoginTime(), LocalDateTime.now());
        if (duration.toMinutes() < 1) {
            boolean success = thisService.change(user.getId(), request.getPassword(), ChangePasswordEnum.CHANGE);
            return R.result(success);
        }

        return R.fail("密码修改失败");
    }


    /**
     * 密码复杂度计算（0-5分）
     *
     * @param password 待检测密码|lHfxoPrKOaWjSqwN
     */
    @PreAuthorize("@ck.hasPermit('auth:password:complexity')")
    @GetMapping("/complexity")
    public R<PasswordComplexityResponse> complexity(@NotBlank String password) {
        int score = PasswordChecker.checkPasswordComplexity(password);
        return R.ok(new PasswordComplexityResponse(score));
    }


    /**
     * 生成随机密码
     */
    @PreAuthorize("@ck.hasPermit('auth:password:random')")
    @GetMapping("/random")
    public R<List<String>> random(@Valid RandomRequest request) {
        List<String> list = new ArrayList<>(request.getCount());
        for (int i = 0; i < request.getCount(); i++) {
            String pwd = CaptchaUtil.randCode(request.getLength(), request.getChars());
            list.add(pwd);
        }
        return R.ok(list);
    }

}
