// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.security;

import {{ cookiecutter.basePackage }}.biz.auth.constant.AuthConst;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.service.IPermissionService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;
import java.util.concurrent.TimeUnit;

// 参考文章： https://blog.csdn.net/qq_22075913/article/details/125148535
@Service
public class UserDetailServiceImpl implements UserDetailsService {

    @Autowired
    IUserService userService;

    @Autowired
    IPermissionService permissionService;

    @Resource
    StringRedisTemplate stringRedisTemplate;

    @Autowired
    private PasswordProperties passwordProperties;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        String loginName = "";
        String mobile = "";
        String email = "";
        String[] strings = username.split("#");
        switch (strings[0]) {
            case "loginName":
                loginName = strings[1];
                break;
            case "mobile":
                mobile = strings[1];
                break;
            case "email":
                email = strings[1];
                break;
        }

        // 根据用户名查询用户信息
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.eq(StringUtils.isNotBlank(loginName), "login_name", loginName);
        wrapper.eq(StringUtils.isNotBlank(email), "email", email);
        wrapper.eq(StringUtils.isNotBlank(mobile), "mobile", mobile);
        User user = userService.getOne(wrapper);

        // 如果没有查询到对应用户
        if (null == user) {
            throw new UsernameNotFoundException("用户名或密码错误");
        }

        long userId = user.getId();

        // 查询用户所有权限码和用户所有角色码
        List<String> permissions = permissionService.getSecurityPermissions(userId);

        // 将权限码和角色码存入redis
        String key = "permissions:" + userId;
        stringRedisTemplate.opsForValue().set(key, String.join(AuthConst.DELIMITER, permissions), 24, TimeUnit.HOURS);
        return new LoginUser(permissions, user, passwordProperties);
    }
}
