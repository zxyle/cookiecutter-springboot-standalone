// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.security.filter;

import {{ cookiecutter.basePackage }}.biz.sys.service.IBlacklistService;
import {{ cookiecutter.basePackage }}.biz.sys.service.IWhitelistService;
import {{ cookiecutter.basePackage }}.common.util.CidrUtil;
import {{ cookiecutter.basePackage }}.common.util.ResponseUtil;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;


/**
 * IP黑白名单过滤器
 */
@Component
public class IpFilter extends OncePerRequestFilter {

    public static final boolean blackEnable = true;
    public static final boolean whiteEnable = true;

    IBlacklistService blacklistService;

    IWhitelistService whitelistService;

    Environment environment;

    public IpFilter(IBlacklistService blacklistService, IWhitelistService whitelistService, Environment environment) {
        this.blacklistService = blacklistService;
        this.whitelistService = whitelistService;
        this.environment = environment;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        if (isDev()) {
            filterChain.doFilter(request, response);
            return;
        }

        String ip = request.getRemoteAddr();
        List<String> blacklist = blacklistService.getBlacklist();
        List<String> whitelist = whitelistService.getWhitelist();
        if ((blackEnable && CidrUtil.in(ip, blacklist)) ||
                (whiteEnable && CidrUtil.notIn(ip, whitelist))) {

            ResponseUtil.forbidden(response);
            return;
        }
        filterChain.doFilter(request, response);
    }

    private boolean isDev() {
        String[] profiles = environment.getActiveProfiles();
        List<String> list = Arrays.asList(profiles);
        return list.contains("dev");
    }
}
