// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.user;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.group.Group;
import {{ cookiecutter.basePackage }}.biz.auth.group.GroupService;
import {{ cookiecutter.basePackage }}.biz.auth.mfa.AccountUtil;
import {{ cookiecutter.basePackage }}.biz.auth.permission.Permission;
import {{ cookiecutter.basePackage }}.biz.auth.profile.ProfileService;
import {{ cookiecutter.basePackage }}.biz.auth.role.Role;
import {{ cookiecutter.basePackage }}.biz.auth.user.group.UserGroup;
import {{ cookiecutter.basePackage }}.biz.auth.user.group.UserGroupService;
import {{ cookiecutter.basePackage }}.biz.auth.user.permission.UserPermissionService;
import {{ cookiecutter.basePackage }}.biz.auth.user.role.UserRoleService;
import {{ cookiecutter.basePackage }}.biz.sys.captcha.CaptchaUtil;
import {{ cookiecutter.basePackage }}.common.constant.AuthConst;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 用户 服务实现类
 */
@Service
@RequiredArgsConstructor
@CacheConfig(cacheNames = "UserCache")
public class UserService extends ServiceImpl<UserMapper, User> {

    final StringRedisTemplate stringRedisTemplate;
    final UserGroupService userGroupService;
    final UserRoleService userRoleService;
    final UserPermissionService userPermissionService;
    final GroupService groupService;
    final ProfileService profileService;

    /**
     * 删除用户及其关联角色、用户组、权限
     *
     * @param userId 用户ID
     */
    @CacheEvict(key = "#userId")
    @Transactional
    public boolean delete(Integer userId) {
        boolean s1 = userPermissionService.deleteRelation(userId, 0);
        boolean s2 = userRoleService.deleteRelation(userId, 0);
        boolean s3 = userGroupService.deleteRelation(userId, 0);
        boolean s4 = removeById(userId);
        boolean s5 = profileService.delete(userId);
        boolean s6 = kick(userId);
        return (s1 && s2) && (s3 && s4) && (s5 && s6);
    }


    // 禁用用户
    public boolean disable(Integer userId) {
        User user = new User();
        user.setId(userId);
        user.setEnabled(false);
        boolean success = updateById(user);
        return success && kick(userId);
    }

    // 启用用户
    public boolean enable(Integer userId) {
        User user = new User();
        user.setId(userId);
        user.setEnabled(true);
        return updateById(user);
    }

    // 下线用户
    public boolean kick(Integer userId) {
        String key = AuthConst.KEY_PREFIX + userId;
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        if (hasKey == null || !hasKey) {
            // 用户可能没有登录或登录已过期
            return true;
        }
        Boolean delete = stringRedisTemplate.delete(key);
        return Boolean.TRUE.equals(delete);
    }

    /**
     * 通过账号名查询用户
     *
     * @param account 账号
     */
    @Cacheable(cacheNames = "UserCache", key = "#account", unless = "#result == null")
    public User findByAccount(String account) {
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.eq(AccountUtil.isUsername(account), "username", account);
        wrapper.eq(AccountUtil.isEmail(account), "email", account);
        wrapper.eq(AccountUtil.isMobile(account), "mobile", account);
        return getOne(wrapper);
    }

    /**
     * 查询用户拥有的角色、用户组、权限
     *
     * @param user 用户
     * @param full 是否查询完整信息
     */
    public UserResponse attachUserInfo(User user, boolean full) {
        UserResponse userResponse = new UserResponse();
        if (full) {
            List<Group> groups = userGroupService.findGroupsByUserId(user.getId());
            userResponse.setGroups(CollectionUtils.isNotEmpty(groups) ? groups : null);

            List<Role> roles = userRoleService.findRolesByUserId(user.getId());
            userResponse.setRoles(CollectionUtils.isNotEmpty(roles) ? roles : null);

            List<Permission> permissions = userPermissionService.findPermissionsByUserId(user.getId());
            userResponse.setPermissions(CollectionUtils.isNotEmpty(permissions) ? permissions : null);
        }

        BeanUtils.copyProperties(user, userResponse);
        return userResponse;
    }

    /**
     * 更新用户关联的角色、用户组、权限
     *
     * @param userId        用户ID
     * @param roleIds       角色ID列表
     * @param groupIds      用户组ID列表
     * @param permissionIds 权限ID列表
     */
    public void updateRelation(Integer userId, List<Integer> roleIds, List<Integer> groupIds, List<Integer> permissionIds) {
        userRoleService.updateRelation(userId, roleIds);
        userGroupService.updateRelation(userId, groupIds);
        userPermissionService.updateRelation(userId, permissionIds);
    }

    // 创建用户
    public User create(String account, String encodedPassword) {
        User user = new User();
        user.setPwd(encodedPassword);
        user.setNickname("用户_" + CaptchaUtil.randAlphabet(6));
        if (AccountUtil.isMobile(account)) {
            user.setMobile(account);
        } else if (AccountUtil.isEmail(account)) {
            user.setEmail(account);
        } else {
            user.setUsername(account);
        }
        return user;
    }

    /**
     * 获取所有有管理权限用户组成员
     *
     * @param userId 用户ID
     */
    public List<Integer> getAllChildren(Integer userId) {
        // 查询用户有管理员权限的用户组
        QueryWrapper<UserGroup> queryWrapper = new QueryWrapper<>();
        queryWrapper.select("user_id", "group_id");
        queryWrapper.eq("user_id", userId);
        queryWrapper.eq("admin", AuthConst.ENABLED);
        List<UserGroup> userGroups = userGroupService.list(queryWrapper);

        // 查询用户组的所有子用户组
        List<Group> allGroups = new ArrayList<>();
        List<Group> groups = groupService.list();
        for (UserGroup userGroup : userGroups) {
            allGroups.addAll(groupService.getAllChildren(groups, userGroup.getGroupId()));
        }

        // 查询用户组下的所有用户
        QueryWrapper<UserGroup> userGroupQueryWrapper = new QueryWrapper<>();
        userGroupQueryWrapper.select("user_id", "group_id");
        List<Integer> groupIds = allGroups.stream().distinct().map(Group::getId).collect(Collectors.toList());
        userGroupQueryWrapper.in("group_id", groupIds);
        List<UserGroup> userGroupList = userGroupService.list(userGroupQueryWrapper);
        return userGroupList.stream().map(UserGroup::getUserId).collect(Collectors.toList());
    }

    /**
     * 锁定用户并退出当前登录状态
     *
     * @param userId 用户ID
     */
    public boolean locked(Integer userId) {
        UpdateWrapper<User> wrapper = new UpdateWrapper<>();
        wrapper.eq("id", userId);
        wrapper.set("locked", AuthConst.LOCKED);
        boolean update = update(wrapper);
        boolean kick = kick(userId);
        return update && kick;
    }

    /**
     * 解锁用户
     *
     * @param userId 用户ID
     */
    public boolean unlock(Integer userId) {
        UpdateWrapper<User> wrapper = new UpdateWrapper<>();
        wrapper.eq("id", userId);
        wrapper.set("locked", AuthConst.UNLOCKED);
        boolean update = update(wrapper);

        String key = "pwd:change:" + userId;
        if (Boolean.TRUE.equals(stringRedisTemplate.hasKey(key)))
            stringRedisTemplate.delete(key);
        return update;
    }

    // 带缓存的ID查询
    @Cacheable(key = "#userId", unless = "#result == null")
    public User findById(Integer userId) {
        return getById(userId);
    }
}
