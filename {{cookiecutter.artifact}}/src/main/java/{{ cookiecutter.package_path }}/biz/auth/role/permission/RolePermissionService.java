// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.role.permission;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.permission.Permission;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * 角色权限信息 服务实现类
 */
@Slf4j
@Service
@CacheConfig(cacheNames = "RolePermissionCache")
public class RolePermissionService extends ServiceImpl<RolePermissionMapper, RolePermission> {

    /**
     * 删除映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    @Caching(evict = {
            @CacheEvict(key = "#roleId + ':' + null"),
            @CacheEvict(key = "null + ':' + #permissionId")
    })
    public boolean deleteRelation(Integer roleId, Integer permissionId) {
        if (countRelation(roleId, permissionId) == 0) return true;

        return remove(buildWrapper(roleId, permissionId));
    }

    /**
     * 查询映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    @Cacheable(key = "#roleId + ':' + #permissionId", unless = "#result == null")
    public List<RolePermission> queryRelation(Integer roleId, Integer permissionId) {
        QueryWrapper<RolePermission> wrapper = buildWrapper(roleId, permissionId);
        wrapper.select("role_id, permission_id");
        return list(wrapper);
    }

    /**
     * 统计映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    public Long countRelation(Integer roleId, Integer permissionId) {
        return count(buildWrapper(roleId, permissionId));
    }

    /**
     * 创建映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    @Caching(evict = {
            @CacheEvict(key = "#roleId + ':' + null"),
            @CacheEvict(key = "null + ':' + #permissionId")
    })
    public boolean createRelation(Integer roleId, Integer permissionId) {
        if (countRelation(roleId, permissionId) > 0) return true;

        return save(new RolePermission(roleId, permissionId));
    }

    /**
     * 更新映射关系
     *
     * @param roleId        角色ID
     * @param permissionIds 权限ID列表
     */
    @Transactional
    public boolean updateRelation(Integer roleId, List<Integer> permissionIds) {
        if (CollectionUtils.isEmpty(permissionIds) || roleId == null || roleId == 0L) {
            return false;
        }

        // 删除已有的映射关系
        boolean del = deleteRelation(roleId, null);

        // 创建新的映射关系
        boolean success = permissionIds.stream()
                .allMatch(permissionId -> createRelation(roleId, permissionId));
        return del && success;
    }

    // 构建wrapper
    private QueryWrapper<RolePermission> buildWrapper(Integer roleId, Integer permissionId) {
        QueryWrapper<RolePermission> wrapper = new QueryWrapper<>();
        wrapper.eq(roleId != null && roleId != 0, "role_id", roleId);
        wrapper.eq(permissionId != null && permissionId != 0, "permission_id", permissionId);
        return wrapper;
    }

    /**
     * 查询角色所拥有的权限列表
     *
     * @param roleId 角色ID
     */
    public List<Permission> findPermissionsByRoleId(Integer roleId) {
        return baseMapper.findPermissionsByRoleId(roleId);
    }
}
