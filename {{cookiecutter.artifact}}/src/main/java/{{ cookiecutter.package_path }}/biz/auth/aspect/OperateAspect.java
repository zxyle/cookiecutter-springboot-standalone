// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.aspect;

import {{ cookiecutter.basePackage }}.biz.sys.entity.OperateLog;
import {{ cookiecutter.basePackage }}.biz.sys.service.IOperateLogService;
import {{ cookiecutter.basePackage }}.common.response.R;
import {{ cookiecutter.basePackage }}.common.util.IpUtil;
import {{ cookiecutter.basePackage }}.common.util.JacksonUtil;
import {{ cookiecutter.basePackage }}.config.security.LoginUser;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Method;
import java.time.LocalDateTime;

/**
 * 操作日志记录切面
 */
@Slf4j
@Aspect
@Component
@RequiredArgsConstructor
public class OperateAspect {

    final IOperateLogService logService;

    /**
     * 记录操作日志
     */
    @Around("@annotation(LogOperation)")
    public Object logOperation(ProceedingJoinPoint joinPoint) throws Throwable {
        OperateLog op = new OperateLog();

        // 获取请求IP、路径和方法
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attributes != null) {
            HttpServletRequest request = attributes.getRequest();
            op.setIp(IpUtil.getIpAddr(request));
            op.setPath(request.getRequestURI());
            op.setMethod(request.getMethod());
        }

        // 获取@LogOperation注解上的操作名称和业务名称
        LogOperation annotation = method.getAnnotation(LogOperation.class);
        String operationName = annotation.name();
        String biz = annotation.biz();

        // 记录日志信息
        op.setBiz(biz);
        op.setOperationName(operationName);
        op.setUserId(getUserId());
        op.setOperateTime(LocalDateTime.now());
        if (args.length > 0)
            op.setRequest(JacksonUtil.serialize(args));

        // 调用目标方法
        long startTime = System.currentTimeMillis();
        Object result = joinPoint.proceed();

        // 记录操作结果
        op.setMeasured(System.currentTimeMillis() - startTime);
        R<Object> response = (R) result;
        op.setSuccess(response.isSuccess());
        op.setTraceId(response.getTraceId());
        // 如果操作失败，记录失败原因
        if (!response.isSuccess())
            op.setResponse(response.getMessage());

        logService.saveLog(op);
        return result;
    }

    private Long getUserId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        LoginUser loginUser = (LoginUser) authentication.getPrincipal();
        return loginUser.getUser().getId();
    }
}

