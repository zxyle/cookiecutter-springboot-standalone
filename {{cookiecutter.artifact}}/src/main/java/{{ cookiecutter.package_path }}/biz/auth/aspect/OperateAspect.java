// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.aspect;

import {{ cookiecutter.basePackage }}.biz.auth.security.LoginUser;
import {{ cookiecutter.basePackage }}.biz.sys.entity.OperateLog;
import {{ cookiecutter.basePackage }}.biz.sys.service.IOperateLogService;
import {{ cookiecutter.basePackage }}.common.response.R;
import org.apache.commons.lang3.StringUtils;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.util.regex.Pattern;

// 操作日志切面
@Component
@Aspect
public class OperateAspect {

    IOperateLogService logService;

    public OperateAspect(IOperateLogService logService) {
        this.logService = logService;
    }

    @Around("@annotation(LogOperation)")
    public Object logOperation(ProceedingJoinPoint joinPoint) throws Throwable {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        LoginUser loginUser = (LoginUser) authentication.getPrincipal();

        // 获取方法信息和参数
        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
        Method method = methodSignature.getMethod();
        Object[] args = joinPoint.getArgs();

        // 获取@LogOperation注解上的操作描述信息
        LogOperation logOperation = method.getAnnotation(LogOperation.class);
        String operation = logOperation.value();

        // 记录日志信息
        OperateLog log = new OperateLog();
        log.setOperationType(operation);
        log.setUserId(loginUser.getUser().getId());
        log.setObjectId(getObjectId(args));
        log.setOperateTime(LocalDateTime.now());

        // 调用目标方法
        Object result = joinPoint.proceed();

        R<Object> response = (R) result;
        log.setResult(String.valueOf(response.isSuccess()));
        logService.saveLog(log);
        return result;
    }


    // 获取被操作对象用户ID
    public Long getObjectId(Object[] args) {
        if (args.length > 0) {
            Object arg = args[0];
            String s = arg.toString();
            // 从Url中获取用户ID
            if (StringUtils.isNumeric(s))
                return Long.valueOf(s);

            // 从请求对象中使用正则表达式获取用户ID
            Pattern pattern = Pattern.compile("userId=\\d+");
            if (pattern.matcher(s).find()) {
                String[] split = s.split("userId=");
                String[] split1 = split[1].split(",");
                String userId = split1[0];
                return Long.valueOf(userId);
            }
        }
        return null;
    }
}

