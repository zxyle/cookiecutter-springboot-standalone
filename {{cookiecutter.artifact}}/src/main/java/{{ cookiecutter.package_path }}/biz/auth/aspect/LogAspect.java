// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.aspect;

import {{ cookiecutter.basePackage }}.biz.auth.request.login.LoginRequest;
import {{ cookiecutter.basePackage }}.biz.auth.response.LoginResponse;
import {{ cookiecutter.basePackage }}.biz.sys.entity.LoginLog;
import {{ cookiecutter.basePackage }}.biz.sys.service.ILoginLogService;
import {{ cookiecutter.basePackage }}.common.response.ApiResponse;
import {{ cookiecutter.basePackage }}.common.util.IpUtil;
import lombok.AllArgsConstructor;
import lombok.Data;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.aspectj.lang.reflect.CodeSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

@Aspect    // 定义切面
@Component
public class LogAspect {

    @Autowired
    ILoginLogService loginLogService;

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Pointcut("execution(* {{ cookiecutter.basePackage }}.biz.auth.controller.LoginController.login(..))")
    // 定义切入点表达式
    public void log() {
    }

    @Before("log()")    // 引用切入点
    public void doBefore(JoinPoint joinPoint) {
        logger.info("进入切面");

        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();

        String url = request.getRequestURL().toString();
        String ip = request.getRemoteAddr();
        // 获得类名.方法名
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        // 获得方法参数
        Object[] args = joinPoint.getArgs();

        RequestLog requestLog = new RequestLog(url, ip, classMethod, args);
        // 打印请求信息
        logger.info("Request: {}", requestLog);
    }

    @After("log()")
    public void doAfter() {
        logger.info("------------doAfter------------");
    }

    @AfterReturning(returning = "result", pointcut = "log()")
    public void doAfterReturn(Object result) {

        // 打印返回值
        logger.info("AfterReturning Result: {}", result);
    }


    /**
     * @Around注解 环绕执行，就是在调用目标方法之前和调用之后，都会执行一定的逻辑
     */
    @Around("log()")
    public ApiResponse<LoginResponse> doAround(ProceedingJoinPoint pjp) throws Throwable {
        LoginLog loginLog = new LoginLog();

        logger.info("around start");
        Map<String, Object> map = new HashMap<>();
        Object[] values = pjp.getArgs();
        String[] names = ((CodeSignature) pjp.getSignature()).getParameterNames();
        for (int i = 0; i < names.length; i++) {
            map.put(names[i], values[i]);
        }
        logger.info(map.toString());
        HttpServletRequest servletRequest = (HttpServletRequest) map.get("servletRequest");
        LoginRequest request = (LoginRequest) map.get("request");
        String header = servletRequest.getHeader("User-Agent");
        logger.info("UA: " + header);
        loginLog.setUa(servletRequest.getHeader(HttpHeaders.USER_AGENT));
        loginLog.setIp(IpUtil.getIpAddr(servletRequest));
        loginLog.setAccount(request.getAccount());
        long start = System.currentTimeMillis();
        // 调用执行目标方法(result为目标方法执行结果)，必须有此行代码才会执行目标调用的方法（等价于@befor+@after），否则只会执行一次之前的（等价于@before）
        ApiResponse<LoginResponse> result = (ApiResponse) pjp.proceed();
        logger.info("Around Result: " + result);
        long end = System.currentTimeMillis();
        loginLog.setMsg(result.getMessage());
        loginLog.setIsSuccess(result.isSuccess() ? 1 : 0);

        logger.debug(pjp.getTarget().getClass().getSimpleName() + "->" + pjp.getSignature().getName() + " 耗费时间:" + (end - start) + "毫秒");
        logger.info(" 耗费时间:" + (end - start) + "毫秒");
        logger.info(String.valueOf(loginLog));
        loginLogService.saveLoginLog(loginLog);
        return result;
    }

    @AfterThrowing(throwing = "e", pointcut = "log()")
    public void doAfterThrowing(Throwable e) {
        logger.error("------------doAfterThrowing------------");
        logger.error("Exception: {}", e.getMessage());
        // 获取RequestAttributes
        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();
        logger.info(requestAttributes.getAttributeNames(0).toString());
        // 从获取RequestAttributes中获取HttpServletRequest的信息
        HttpServletRequest request = (HttpServletRequest) requestAttributes.resolveReference(RequestAttributes.REFERENCE_REQUEST);
        // System.out.println(request.);


    }

    @Data
    @AllArgsConstructor
    public class RequestLog {      // 用于封装请求信息
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;
    }
}

