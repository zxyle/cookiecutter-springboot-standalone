// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import cn.hutool.core.lang.tree.Tree;
import cn.hutool.core.lang.tree.TreeNodeConfig;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.constant.AuthConst;
import {{ cookiecutter.basePackage }}.biz.auth.entity.*;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.GroupMapper;
import {{ cookiecutter.basePackage }}.biz.auth.response.GroupResponse;
import {{ cookiecutter.basePackage }}.biz.auth.response.UserResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.*;
import {{ cookiecutter.basePackage }}.common.entity.LiteEntity;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 用户组信息 服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
@CacheConfig(cacheNames = "GroupCache")
public class GroupServiceImpl extends ServiceImpl<GroupMapper, Group> implements IGroupService {

    final IGroupPermissionService groupPermissionService;
    final IGroupRoleService groupRoleService;
    final IUserGroupService userGroupService;

    /**
     * 创建用户组
     *
     * @param group 用户组对象
     */
    @Cacheable(key = "#result.id")
    @Override
    public Group create(Group group) {
        // 判断同级下, 是否有同名用户组
        if (count(group.getParentId(), group.getName()) > 0) {
            log.info("{} 同级同名用户组已存在", group.getName());
            return null;
        }

        // 计算用户组排序
        if (null == group.getSort()) {
            // 排序号 = 最大排序号 + 1
            Integer maxSort = baseMapper.selectMaxSort(group.getParentId());
            group.setSort(maxSort + 1);
        }
        baseMapper.insert(group);
        return group;
    }

    /**
     * 获取该用户组下 子用户组数量
     *
     * @param parentId 上级用户组ID
     * @param name     用户组名称
     * @return 数量
     */
    @Override
    public Integer count(Integer parentId, String name) {
        QueryWrapper<Group> wrapper = new QueryWrapper<>();
        wrapper.eq("parent_id", parentId);
        wrapper.eq(StringUtils.isNotBlank(name), "name", name);
        return baseMapper.selectCount(wrapper);
    }

    /**
     * 获取该用户组下所有子用户组ID（包括自身）
     */
    @Cacheable(cacheNames = "subGroupsCache", key = "#rootGroupId", unless = "#result == null")
    @Override
    public List<Integer> getSubGroups(Integer rootGroupId) {
        List<Group> groups = getAllChildren(null, rootGroupId);
        return groups.stream().map(LiteEntity::getId).distinct().collect(Collectors.toList());
    }

    /**
     * 删除用户组及关联关系
     *
     * @param groupId 用户组ID
     */
    @CacheEvict(key = "#groupId")
    @Transactional
    @Override
    public boolean delete(Integer groupId) {
        boolean s1 = groupPermissionService.deleteRelation(groupId, 0);
        boolean s2 = groupRoleService.deleteRelation(groupId, 0);
        boolean s3 = userGroupService.deleteRelation(0, groupId);
        boolean s4 = removeById(groupId);
        return (s1 && s2) && (s3 && s4);
    }

    /**
     * 获取用户组树
     *
     * @param rootId 根节点ID
     */
    @Override
    public List<Tree<Integer>> getTree(Integer rootId) {
        // 查询所有数据
        QueryWrapper<Group> wrapper = new QueryWrapper<>();
        wrapper.select("id", "parent_id", "name", "sort");
        wrapper.eq("parent_id", rootId);
        List<Group> list = list(wrapper);

        TreeNodeConfig config = new TreeNodeConfig();
        config.setNameKey("name");
        config.setIdKey("id");
        config.setWeightKey("sort");
        return cn.hutool.core.lang.tree.TreeUtil.build(list, rootId, config, (object, tree) -> {
            tree.setId(object.getId());// 必填属性
            tree.setParentId(object.getParentId());// 必填属性
            tree.setName(object.getName());
            tree.putExtra("sort", object.getSort());
        });
    }

    /**
     * 获取所有子用户组（包含自身）
     *
     * @param groups  用户组列表
     * @param groupId 根节点ID
     */
    @Override
    public List<Group> getAllChildren(List<Group> groups, Integer groupId) {
        if (CollectionUtils.isEmpty(groups)){
            QueryWrapper<Group> wrapper = new QueryWrapper<>();
            wrapper.select("id", "parent_id");
            groups = list(wrapper);
        }

        List<Group> children = new ArrayList<>();
        for (Group group : groups) {
            if (group.getParentId().equals(groupId)) {
                children.add(group);
                children.addAll(getAllChildren(groups, group.getId()));
            }
        }

        // 添加自身
        Group group = new Group();
        group.setId(groupId);
        children.add(group);
        return children;
    }

    @Override
    public boolean isAllowed(Integer actionUserId, Integer acceptUserId, Integer acceptGroupId) {
        // 查询当前用户有管理员权限的用户组
        QueryWrapper<UserGroup> wrapper = new QueryWrapper<>();
        wrapper.select("user_id, group_id");
        wrapper.eq("user_id", actionUserId);
        wrapper.eq("admin", AuthConst.ENABLED);
        List<UserGroup> userGroups = userGroupService.list(wrapper);
        if (CollectionUtils.isEmpty(userGroups)) {
            return false;
        }

        List<Group> allGroups = new ArrayList<>();
        QueryWrapper<Group> wrapper1 = new QueryWrapper<>();
        wrapper1.select("id", "parent_id");
        List<Group> groups = list(wrapper1);
        // 获取所有子用户组
        for (UserGroup userGroup : userGroups) {
            allGroups.addAll(getAllChildren(groups, userGroup.getGroupId()));
        }

        // 去重
        List<Integer> allGroupIds = allGroups.stream()
                .map(Group::getId).distinct().collect(Collectors.toList());

        if (acceptUserId != null) {
            // 查询该用户所在的用户组
            List<UserGroup> userGroups1 = userGroupService.queryRelation(acceptUserId, null);
            if (CollectionUtils.isEmpty(userGroups1)) {
                return false;
            }

            // 判断该用户是否在这些用户组下
            for (UserGroup userGroup : userGroups1) {
                if (allGroupIds.contains(userGroup.getGroupId())) {
                    return true;
                }
            }
        }

        if (acceptGroupId != null) {
            // 判断parentId是否在其中
            return allGroupIds.contains(acceptGroupId);
        }
        return false;
    }

    /**
     * 更新用户组关联关系
     *
     * @param groupId       用户组ID
     * @param roleIds       角色ID
     * @param permissionIds 权限ID
     */
    @Override
    public void updateRelation(Integer groupId, List<Integer> roleIds, List<Integer> permissionIds) {
        groupPermissionService.updateRelation(groupId, permissionIds);
        groupRoleService.updateRelation(groupId, roleIds);
    }

    /**
     * 获取用户组详细信息
     *
     * @param group 用户组对象
     */
    @Override
    public GroupResponse attachGroupInfo(Group group, boolean full) {
        GroupResponse response = new GroupResponse();
        BeanUtils.copyProperties(group, response);

        if (full) {
            List<Permission> permissions = groupPermissionService.findPermissionsByGroupId(group.getId());
            response.setPermissions(CollectionUtils.isNotEmpty(permissions) ? permissions : null);

            List<Role> roles = groupRoleService.findRolesByGroupId(group.getId());
            response.setRoles(CollectionUtils.isNotEmpty(roles) ? roles : null);

            List<User> users = userGroupService.findUsersByGroupId(group.getId());
            // 对用户信息进行脱敏处理
            List<UserResponse> collect = users.stream()
                    .map(UserResponse::new).collect(Collectors.toList());
            response.setUsers(CollectionUtils.isNotEmpty(collect) ? collect : null);
        }

        return response;
    }

    /**
     * 判断用户组是否已经被使用
     *
     * @param groupId 用户组ID
     */
    @Override
    public boolean isAlreadyUsed(Integer groupId) {
        if (userGroupService.countRelation(0, groupId) > 0) {
            return true;
        }

        return count(groupId, null) > 0;
    }

    /**
     * 按ID查询（查询结果不为null则缓存）
     */
    @Cacheable(key = "#id", unless = "#result == null")
    @Override
    public Group findById(Integer id) {
        return getById(id);
    }
}
