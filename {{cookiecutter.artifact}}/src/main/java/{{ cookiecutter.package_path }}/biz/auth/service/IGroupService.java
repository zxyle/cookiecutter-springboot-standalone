// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service;

import cn.hutool.core.lang.tree.Tree;
import com.baomidou.mybatisplus.extension.service.IService;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Group;
import {{ cookiecutter.basePackage }}.biz.auth.response.GroupResponse;

import java.util.List;

/**
 * 用户组 服务类
 */
public interface IGroupService extends IService<Group> {

    /**
     * 创建用户组
     *
     * @param group 用户组对象
     */
    Group create(Group group);

    /**
     * 获取该用户组下 子用户组数量
     *
     * @param parentId 上级用户组ID
     * @param name     用户组名称
     * @return 数量
     */
    Integer count(Long parentId, String name);

    /**
     * 获取该用户组下所有子用户组ID（包括自身）
     */
    List<Long> getSubGroups(Long rootGroupId);

    /**
     * 删除用户组及关联关系
     *
     * @param groupId 用户组ID
     */
    boolean delete(Long groupId);

    /**
     * 获取用户组树
     *
     * @param rootId 根节点ID
     */
    List<Tree<Long>> getTree(Long rootId);

    /**
     * 获取所有子用户组（包含自身）
     *
     * @param groups  用户组列表
     * @param groupId 根节点ID
     */
    List<Group> getAllChildren(List<Group> groups, Long groupId);

    /**
     * 判断一个用户是否有对另一个用户或另一个用户组的管理权限
     *
     * @param actionUserId  管理员用户ID
     * @param acceptUserId  被管理的用户ID
     * @param acceptGroupId 用户组ID
     * @return true 有权限，false 无权限
     */
    boolean isAllowed(Long actionUserId, Long acceptUserId, Long acceptGroupId);

    /**
     * 更新用户组关联关系
     *
     * @param groupId       用户组ID
     * @param roleIds       角色ID
     * @param permissionIds 权限ID
     */
    void updateRelation(Long groupId, List<Long> roleIds, List<Long> permissionIds);

    /**
     * 获取用户组详细信息
     *
     * @param group 用户组对象
     */
    GroupResponse attachGroupInfo(Group group, boolean full);

    /**
     * 判断用户组是否已经被使用
     *
     * @param groupId 用户组ID
     */
    boolean isAlreadyUsed(Long groupId);

    /**
     * 按ID查询（带缓存）
     */
    Group queryById(Long id);

}
