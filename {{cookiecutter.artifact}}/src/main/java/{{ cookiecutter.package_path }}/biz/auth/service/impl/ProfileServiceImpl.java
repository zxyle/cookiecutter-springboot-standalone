// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import {{ cookiecutter.basePackage }}.biz.auth.entity.Profile;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.ProfileMapper;
import {{ cookiecutter.basePackage }}.biz.auth.service.IProfileService;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

/**
 * 用户信息 服务实现类
 */
@Slf4j
@Service
@CacheConfig(cacheNames = "ProfileCache")
public class ProfileServiceImpl extends ServiceImpl<ProfileMapper, Profile> implements IProfileService {

    /**
     * 按ID查询信息
     *
     * @param userId 用户ID
     */
    @Cacheable(key = "#userId")
    @Override
    public Profile queryByUserId(Long userId) {
        QueryWrapper<Profile> wrapper = new QueryWrapper<>();
        wrapper.eq("user_id", userId);
        return getOne(wrapper);
    }

    /**
     * 更新用户信息
     *
     * @param profile 用户信息
     */
    @CachePut(key = "#profile.userId")
    @Override
    public Profile updateProfile(Profile profile) {
        UpdateWrapper<Profile> wrapper = new UpdateWrapper<>();
        wrapper.eq("user_id", profile.getUserId());
        // 如果没有数据，则新增
        boolean success = saveOrUpdate(profile, wrapper);
        if (success) {
            // 更新后获取更新后的数据
            return getOne(wrapper);
        }
        return profile;
    }

    // 删除用户信息
    @CacheEvict(key = "#userId")
    @Override
    public boolean delete(Long userId) {
        QueryWrapper<Profile> wrapper = new QueryWrapper<>();
        wrapper.eq("user_id", userId);
        if (count(wrapper) == 0)
            return true;

        return remove(wrapper);
    }
}
