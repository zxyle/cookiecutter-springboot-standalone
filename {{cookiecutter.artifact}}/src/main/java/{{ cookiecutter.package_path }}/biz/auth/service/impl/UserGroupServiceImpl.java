// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import {{ cookiecutter.basePackage }}.biz.auth.entity.Group;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserGroup;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.UserGroupMapper;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserGroupService;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * 用户-用户组关联 服务实现类
 */
@Slf4j
@Service
@CacheConfig(cacheNames = "UserGroupCache")
public class UserGroupServiceImpl extends ServiceImpl<UserGroupMapper, UserGroup> implements IUserGroupService {

    /**
     * 删除映射关系
     *
     * @param userId  用户ID
     * @param groupId 用户组ID
     */
    @Caching(evict = {
            @CacheEvict(key = "#userId + ':' + null"),
            @CacheEvict(key = "null + ':' + #groupId"),
            @CacheEvict(key = "'users:group' + #groupId"),
            @CacheEvict(key = "'groups:user' + #userId")
    })
    @Override
    public boolean deleteRelation(Long userId, Long groupId) {
        if (countRelation(userId, groupId) == 0) return true;

        return remove(buildWrapper(userId, groupId));
    }

    /**
     * 查询映射关系
     *
     * @param userId  用户ID
     * @param groupId 用户组ID
     */
    @Cacheable(key = "#userId + ':' + #groupId", unless = "#result == null")
    @Override
    public List<UserGroup> queryRelation(Long userId, Long groupId) {
        QueryWrapper<UserGroup> wrapper = buildWrapper(userId, groupId);
        wrapper.select("user_id", "group_id");
        return list(wrapper);
    }

    /**
     * 统计映射关系
     *
     * @param userId  用户ID
     * @param groupId 用户组ID
     */
    @Override
    public Integer countRelation(Long userId, Long groupId) {
        return count(buildWrapper(userId, groupId));
    }

    /**
     * 创建映射关系
     *
     * @param userId  用户ID
     * @param groupId 用户组ID
     */
    @Caching(evict = {
            @CacheEvict(key = "#userId + ':' + null"),
            @CacheEvict(key = "null + ':' + #groupId"),
            @CacheEvict(key = "'users:group' + #groupId"),
            @CacheEvict(key = "'groups:user' + #userId")
    })
    @Override
    public boolean createRelation(Long userId, Long groupId) {
        if (countRelation(userId, groupId) > 0) return true;

        return save(new UserGroup(userId, groupId));
    }

    /**
     * 更新映射关系
     *
     * @param userId   用户ID
     * @param groupIds 用户组ID列表
     */
    @Transactional
    @Override
    public void updateRelation(Long userId, List<Long> groupIds) {
        if (CollectionUtils.isEmpty(groupIds) || userId == null || userId == 0L) {
            return;
        }

        remove(buildWrapper(userId, null));
        for (Long groupId : groupIds) {
            createRelation(userId, groupId);
        }
    }

    // 构建wrapper
    private QueryWrapper<UserGroup> buildWrapper(Long userId, Long groupId) {
        QueryWrapper<UserGroup> wrapper = new QueryWrapper<>();
        wrapper.eq(userId != null && userId != 0L, "user_id", userId);
        wrapper.eq(groupId != null && groupId != 0L, "group_id", groupId);
        return wrapper;
    }

    /**
     * 查询用户所属的用户组
     *
     * @param userId 用户ID
     */
    @Cacheable(key = "'groups:user' + #userId", unless = "#result == null")
    @Override
    public List<Group> findGroupsByUserId(Long userId) {
        return baseMapper.listGroups(userId);
    }

    /**
     * 查询用户组下的用户
     *
     * @param groupId 用户组ID
     */
    @Cacheable(key = "'users:group' + #groupId", unless = "#result == null")
    @Override
    public List<User> findUsersByGroupId(Long groupId) {
        return baseMapper.listUsers(groupId);
    }
}
