// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import {{ cookiecutter.basePackage }}.biz.auth.service.EmailCodeService;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Verification;
import {{ cookiecutter.basePackage }}.biz.sys.service.IVerificationService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import javax.mail.internet.MimeMessage;

@Slf4j
@Service
public class EmailCodeServiceImpl implements EmailCodeService {

    // 第1步: 注入邮件发送者
    @Autowired
    JavaMailSenderImpl javaMailSender;

    @Value("${app.name}")
    private String appName;

    @Value("${spring.mail.username}")
    private String sender;

    @Value("${captcha.alive-time}")
    private Integer aliveTime;

    @Autowired
    IVerificationService verificationService;


    /**
     * 发送邮件验证码
     *
     * @param code      验证码
     * @param recipient 接收者邮箱
     */
    @Async
    @Override
    public void sendVerificationCode(String recipient, String code) {
        String content = String.format("邮箱验证码为<b>%s</b>，验证码有效期为%s分钟!", code, aliveTime);
        log.info(content);
        String subject = String.format("【%s】邮箱验证码", appName);

        MimeMessage message = javaMailSender.createMimeMessage();
        MimeMessageHelper mimeMessageHelper;
        try {
            mimeMessageHelper = new MimeMessageHelper(message, true);
            // 邮件发送人
            mimeMessageHelper.setFrom(appName + '<' + sender + '>');
            // 邮件接收人
            mimeMessageHelper.setTo(recipient);
            // 邮件主题
            mimeMessageHelper.setSubject(subject);
            // 邮件内容,HTML格式
            mimeMessageHelper.setText(content, true);
            javaMailSender.send(message);

            // 记录邮箱验证码发送记录
            Verification verification = new Verification();
            verification.setContent(content);
            verification.setKind("email");
            verification.setReceiver(recipient);
            verificationService.save(verification);
        } catch (Exception ignored) {

        }

    }
}
