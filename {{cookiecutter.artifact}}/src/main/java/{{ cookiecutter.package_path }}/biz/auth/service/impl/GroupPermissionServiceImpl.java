// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import {{ cookiecutter.basePackage }}.biz.auth.entity.GroupPermission;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Permission;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.GroupPermissionMapper;
import {{ cookiecutter.basePackage }}.biz.auth.service.IGroupPermissionService;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * 用户组权限 服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
@CacheConfig(cacheNames = "GroupPermissionCache")
public class GroupPermissionServiceImpl extends ServiceImpl<GroupPermissionMapper, GroupPermission> implements IGroupPermissionService {

    /**
     * 查询用户组拥有的权限列表
     */
    @Cacheable(key = "'permissions:' + #groupId", unless = "#result == null")
    @Override
    public List<Permission> findPermissionsByGroupId(Integer groupId) {
        return baseMapper.findPermissionsByGroupId(groupId);
    }

    /**
     * 删除映射关系
     *
     * @param groupId      用户组ID
     * @param permissionId 权限ID
     */
    @Caching(evict = {
            @CacheEvict(key = "#groupId + ':' + null"),
            @CacheEvict(key = "null + ':' + #permissionId"),
            @CacheEvict(key = "'permissions:' + #groupId")
    })
    @Override
    public boolean deleteRelation(Integer groupId, Integer permissionId) {
        if (countRelation(groupId, permissionId) == 0) return true;

        return remove(buildWrapper(groupId, permissionId));
    }

    /**
     * 查询映射关系
     *
     * @param groupId      用户组ID
     * @param permissionId 权限ID
     */
    @Cacheable(key = "#groupId + ':' + #permissionId", unless = "#result == null")
    @Override
    public List<GroupPermission> queryRelation(Integer groupId, Integer permissionId) {
        QueryWrapper<GroupPermission> wrapper = buildWrapper(groupId, permissionId);
        wrapper.select("group_id", "permission_id");
        return list(wrapper);
    }

    /**
     * 统计映射关系
     *
     * @param groupId      用户组ID
     * @param permissionId 权限ID
     */
    @Override
    public Integer countRelation(Integer groupId, Integer permissionId) {
        return count(buildWrapper(groupId, permissionId));
    }

    /**
     * 创建映射关系
     *
     * @param groupId      用户组ID
     * @param permissionId 权限ID
     */
    @Caching(evict = {
            @CacheEvict(key = "#groupId + ':' + null"),
            @CacheEvict(key = "null + ':' + #permissionId"),
            @CacheEvict(key = "'permissions:' + #groupId")
    })
    @Override
    public boolean createRelation(Integer groupId, Integer permissionId) {
        if (countRelation(groupId, permissionId) > 0) return true;

        return save(new GroupPermission(groupId, permissionId));
    }

    /**
     * 更新映射关系
     *
     * @param groupId       用户组ID
     * @param permissionIds 权限ID列表
     */
    @Transactional
    @Override
    public void updateRelation(Integer groupId, List<Integer> permissionIds) {
        if (CollectionUtils.isEmpty(permissionIds) || groupId == null || groupId == 0L) {
            return;
        }
        // 删除旧的关系
        deleteRelation(groupId, null);
        // 创建新的关系
        permissionIds.forEach(permissionId -> createRelation(groupId, permissionId));
    }

    // 构建wrapper
    private QueryWrapper<GroupPermission> buildWrapper(Integer groupId, Integer permissionId) {
        QueryWrapper<GroupPermission> wrapper = new QueryWrapper<>();
        wrapper.eq(groupId != null && groupId != 0, "group_id", groupId);
        wrapper.eq(permissionId != null && permissionId != 0, "permission_id", permissionId);
        return wrapper;
    }
}
