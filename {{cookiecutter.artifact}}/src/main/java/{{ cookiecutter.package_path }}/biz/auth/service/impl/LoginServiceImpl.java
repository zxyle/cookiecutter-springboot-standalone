// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.response.LoginResponse;
import {{ cookiecutter.basePackage }}.biz.auth.security.LoginUser;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import {{ cookiecutter.basePackage }}.biz.auth.service.LoginService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

/**
 * 登录服务实现
 */
@Service
@RequiredArgsConstructor
public class LoginServiceImpl implements LoginService {

    final AuthenticationManager authenticationManager;
    final IUserService userService;

    /**
     * 用户登录
     *
     * @param account  用户名/邮箱/手机号
     * @param password 密码
     * @return 登录响应
     */
    @Override
    public LoginResponse login(String account, String password) {
        UsernamePasswordAuthenticationToken authenticationToken =
                new UsernamePasswordAuthenticationToken(account, password);
        // 进行用户认证
        Authentication authenticate = authenticationManager.authenticate(authenticationToken);
        // 认证成功后，将认证信息存入SecurityContextHolder中
        SecurityContextHolder.getContext().setAuthentication(authenticate);

        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();
        User user = loginUser.getUser();
        return new LoginResponse(user);
    }

    /**
     * 退出登录
     *
     * @param userId 用户id
     * @return 是否成功
     */
    @Override
    public boolean logout(Long userId) {
        // 清除登录信息
        SecurityContextHolder.clearContext();
        // 删除redis中用户权限缓存
        return userService.kick(userId);
    }
}
