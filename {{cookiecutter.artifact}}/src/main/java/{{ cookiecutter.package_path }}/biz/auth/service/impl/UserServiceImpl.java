// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import {{ cookiecutter.basePackage }}.biz.auth.constant.AuthConst;
import {{ cookiecutter.basePackage }}.biz.auth.constant.PwdConst;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserGroup;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.UserMapper;
import {{ cookiecutter.basePackage }}.biz.auth.request.user.AddUserRequest;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserGroupService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserPermissionService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserRoleService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserService;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.time.LocalDateTime;

/**
 * 用户 服务实现类
 */
@Service
public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements IUserService {

    @Resource
    StringRedisTemplate stringRedisTemplate;

    IUserGroupService userGroupService;

    IUserRoleService userRoleService;

    IUserPermissionService userPermissionService;

    public UserServiceImpl(IUserGroupService userGroupService, IUserRoleService userRoleService, IUserPermissionService userPermissionService) {
        this.userGroupService = userGroupService;
        this.userRoleService = userRoleService;
        this.userPermissionService = userPermissionService;
    }

    /**
     * 添加用户
     */
    @Transactional
    @Override
    public User addUser(AddUserRequest request) {
        String pwd = request.getPwd();
        User user = new User();
        BeanUtils.copyProperties(request, user);
        pwd = StringUtils.isNotBlank(pwd) ? pwd : PwdConst.DEFAULT_PWD;
        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        user.setPwd(passwordEncoder.encode(pwd));
        save(user);

        // 添加用户组
        UserGroup userGroup = new UserGroup(user.getId(), request.getGroupId());
        userGroupService.save(userGroup);
        return user;
    }

    /**
     * 删除用户
     *
     * @param userId 用户ID
     */
    @Transactional
    @Override
    public boolean delete(Long userId) {
        // TODO 判断当前登录用户能否删除指定用户
        boolean s1 = removeById(userId);
        boolean s2 = userPermissionService.deleteRelation(userId, 0L);
        boolean s3 = userRoleService.deleteRelation(userId, 0L);
        boolean s4 = userGroupService.deleteRelation(userId, 0L);
        return (s1 && s2) && (s3 && s4);
    }

    /**
     * 通过ID查询用户
     *
     * @param userId 用户ID
     */
    @Override
    @Cacheable(cacheNames = "userCache", key = "#userId")
    public User queryById(Long userId) {
        return getById(userId);
    }

    /**
     * 修改密码
     *
     * @param userId 用户ID
     * @param newPwd 加密后的新密码
     */
    @Override
    public boolean changePwd(Long userId, String newPwd) {
        UpdateWrapper<User> updateWrapper = new UpdateWrapper<>();
        updateWrapper.set("pwd", newPwd);
        updateWrapper.set("pwd_change_time", LocalDateTime.now());
        updateWrapper.eq("id", userId);
        return update(updateWrapper);
    }

    /**
     * 通过手机号查询用户
     *
     * @param mobile 手机号
     */
    @Override
    public User queryByPrincipal(String mobile, String email) {
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.eq(StringUtils.isNotBlank(mobile), "mobile", mobile);
        wrapper.eq(StringUtils.isNotBlank(email), "email", email);
        return getOne(wrapper);
    }

    /**
     * 禁用用户
     *
     * @param userId 用户ID
     */
    @Override
    public boolean disable(Long userId) {
        User user = new User();
        user.setId(userId);
        user.setEnabled(AuthConst.DISABLED);
        boolean success = updateById(user);
        // 已经登录的用户，需要清除缓存
        String key = "permissions:" + userId;
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        if (hasKey == null || !hasKey) {
            return success;
        }
        Boolean delete = stringRedisTemplate.delete(key);
        return success && Boolean.TRUE.equals(delete);
    }
}
