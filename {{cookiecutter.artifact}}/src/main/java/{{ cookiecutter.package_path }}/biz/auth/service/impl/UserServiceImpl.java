// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import {{ cookiecutter.basePackage }}.biz.auth.constant.AuthConst;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.UserMapper;
import {{ cookiecutter.basePackage }}.biz.auth.response.UserResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.*;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.util.AccountUtil;
import org.springframework.beans.BeanUtils;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;

/**
 * 用户 服务实现类
 */
@Service
public class UserServiceImpl extends ServiceImpl<UserMapper, User> implements IUserService {

    @Resource
    StringRedisTemplate stringRedisTemplate;

    IUserGroupService userGroupService;

    IUserRoleService userRoleService;

    IUserPermissionService userPermissionService;

    public UserServiceImpl(IUserGroupService userGroupService, IUserRoleService userRoleService, IUserPermissionService userPermissionService) {
        this.userGroupService = userGroupService;
        this.userRoleService = userRoleService;
        this.userPermissionService = userPermissionService;
    }

    // 删除用户及其关联角色、用户组、权限
    @Transactional
    @Override
    public boolean delete(Long userId) {
        boolean s1 = userPermissionService.deleteRelation(userId, 0L);
        boolean s2 = userRoleService.deleteRelation(userId, 0L);
        boolean s3 = userGroupService.deleteRelation(userId, 0L);
        boolean s4 = removeById(userId);
        return (s1 && s2) && (s3 && s4);
    }


    // 禁用用户
    @Override
    public boolean disable(Long userId) {
        User user = new User();
        user.setId(userId);
        user.setEnabled(AuthConst.DISABLED);
        boolean success = updateById(user);
        // 已经登录的用户，需要清除缓存
        String key = "permissions:" + userId;
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        if (hasKey == null || !hasKey) {
            return success;
        }
        Boolean delete = stringRedisTemplate.delete(key);
        return success && Boolean.TRUE.equals(delete);
    }

    // 启用用户
    @Override
    public boolean enable(Long userId) {
        User user = new User();
        user.setId(userId);
        user.setEnabled(AuthConst.ENABLED);
        return updateById(user);
    }

    // 用户踢下线
    @Override
    public boolean kick(Long userId) {
        String key = "permissions:" + userId;
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        if (hasKey == null || !hasKey) {
            // 用户可能没有登录或登录已过期
            return true;
        }
        Boolean delete = stringRedisTemplate.delete(key);
        return Boolean.TRUE.equals(delete);
    }

    // 通过账号名查询用户
    @Override
    public User queryByAccount(String account) {
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.eq(AccountUtil.isUsername(account), "username", account);
        wrapper.eq(AccountUtil.isEmail(account), "email", account);
        wrapper.eq(AccountUtil.isMobile(account), "mobile", account);
        return getOne(wrapper);
    }

    @Override
    public UserResponse attachUserInfo(User user) {
        UserResponse userResponse = new UserResponse();
        userResponse.setGroups(userGroupService.queryGroupByUserId(user.getId()));
        userResponse.setRoles(userRoleService.selectRoleByUserId(user.getId()));
        userResponse.setPermissions(userPermissionService.selectPermissionByUserId(user.getId()));
        BeanUtils.copyProperties(user, userResponse);
        return userResponse;
    }
}
