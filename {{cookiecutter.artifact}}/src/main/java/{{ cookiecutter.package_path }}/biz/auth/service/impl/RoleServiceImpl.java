// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Permission;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Role;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.RoleMapper;
import {{ cookiecutter.basePackage }}.biz.auth.response.RoleResponse;
import {{ cookiecutter.basePackage }}.biz.auth.service.*;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * 角色信息 服务实现类
 */
@Service
@RequiredArgsConstructor
@CacheConfig(cacheNames = "RoleCache")
public class RoleServiceImpl extends ServiceImpl<RoleMapper, Role> implements IRoleService {

    final IGroupRoleService groupRoleService;
    final IRolePermissionService rolePermissionService;
    final IUserRoleService userRoleService;

    /**
     * 删除角色
     *
     * @param roleId 角色ID
     */
    @CacheEvict(key = "#roleId")
    @Transactional
    @Override
    public boolean delete(Long roleId) {
        boolean s1 = groupRoleService.deleteRelation(0L, roleId);
        boolean s2 = rolePermissionService.deleteRelation(roleId, 0L);
        boolean s3 = userRoleService.deleteRelation(0L, roleId);
        boolean s4 = removeById(roleId);
        return (s1 && s2) && (s3 && s4);
    }

    /**
     * 通过ID查询角色
     *
     * @param roleId 角色ID
     */
    @Cacheable(key = "#roleId", unless = "#result == null")
    @Override
    public Role queryById(Long roleId) {
        return getById(roleId);
    }

    /**
     * 判断角色是否已经被使用
     *
     * @param roleId 角色ID
     * @return true 已经被使用 false 未被使用
     */
    @Override
    public boolean isAlreadyUsed(Long roleId) {
        if (userRoleService.countRelation(null, roleId) > 0) {
            return true;
        }

        return groupRoleService.countRelation(null, roleId) > 0;
    }

    /**
     * 查询角色对应权限关系
     *
     * @param role 角色
     * @return 包含权限关系的角色对象
     */
    @Override
    public RoleResponse attachRoleInfo(Role role, boolean full) {
        RoleResponse response = new RoleResponse();

        if (full) {
            List<Permission> permissions = rolePermissionService.findPermissionsByRoleId(role.getId());
            response.setPermissions(CollectionUtils.isNotEmpty(permissions) ? permissions : null);
        }

        BeanUtils.copyProperties(role, response);
        return response;
    }

    // 更新角色权限关系
    @Override
    public void updateRelation(Long roleId, List<Long> permissionIds) {
        rolePermissionService.updateRelation(roleId, permissionIds);
    }

    /**
     * 判断角色名称或者编码是否重复
     *
     * @param name 角色名称
     * @param code 角色编码
     * @return true 重复 false 不重复
     */
    @Override
    public boolean isDuplicate(String name, String code) {
        QueryWrapper<Role> wrapper = new QueryWrapper<>();
        wrapper.eq(StringUtils.isNotBlank(name), "name", name)
                .or().eq(StringUtils.isNotBlank(code), "code", code);
        return count(wrapper) > 0;
    }
}
