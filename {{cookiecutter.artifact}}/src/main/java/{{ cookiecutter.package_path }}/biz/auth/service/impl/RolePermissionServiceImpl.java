// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Permission;
import {{ cookiecutter.basePackage }}.biz.auth.entity.RolePermission;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.RolePermissionMapper;
import {{ cookiecutter.basePackage }}.biz.auth.service.IRolePermissionService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * 角色权限信息 服务实现类
 */
@Slf4j
@Service
public class RolePermissionServiceImpl extends ServiceImpl<RolePermissionMapper, RolePermission> implements IRolePermissionService {

    /**
     * 删除映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    @Override
    public boolean deleteRelation(Long roleId, Long permissionId) {
        if (countRelation(roleId, permissionId) == 0) return true;

        return remove(buildWrapper(roleId, permissionId));
    }

    /**
     * 查询映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    @Override
    public List<RolePermission> queryRelation(Long roleId, Long permissionId) {
        QueryWrapper<RolePermission> wrapper = buildWrapper(roleId, permissionId);
        wrapper.select("role_id, permission_id");
        return list(wrapper);
    }

    /**
     * 统计映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    @Override
    public Integer countRelation(Long roleId, Long permissionId) {
        return count(buildWrapper(roleId, permissionId));
    }

    /**
     * 创建映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    @Override
    public boolean createRelation(Long roleId, Long permissionId) {
        if (countRelation(roleId, permissionId) > 0) return true;

        return save(new RolePermission(roleId, permissionId));
    }

    /**
     * 分页查询映射关系
     *
     * @param roleId       角色ID
     * @param permissionId 权限ID
     */
    @Override
    public IPage<RolePermission> pageRelation(Long roleId, Long permissionId, IPage<RolePermission> iPage) {
        QueryWrapper<RolePermission> wrapper = buildWrapper(roleId, permissionId);
        wrapper.select("role_id, permission_id");
        return page(iPage, wrapper);
    }

    /**
     * 更新映射关系
     *
     * @param roleId        角色ID
     * @param permissionIds 权限ID列表
     */
    @Transactional
    @Override
    public boolean updateRelation(Long roleId, List<Long> permissionIds) {
        if (CollectionUtils.isEmpty(permissionIds) || roleId == null || roleId == 0L) {
            return false;
        }

        // 删除旧的映射关系
        boolean del = deleteRelation(roleId, null);

        boolean result = true;
        // 创建新的映射关系
        for (Long permissionId : permissionIds) {
            boolean success = createRelation(roleId, permissionId);
            if (!success) {
                result = false;
            }
        }
        return del && result;
    }

    // 构建wrapper
    public QueryWrapper<RolePermission> buildWrapper(Long roleId, Long permissionId) {
        QueryWrapper<RolePermission> wrapper = new QueryWrapper<>();
        wrapper.eq(roleId != null && roleId != 0L, "role_id", roleId);
        wrapper.eq(permissionId != null && permissionId != 0L, "permission_id", permissionId);
        return wrapper;
    }

    /**
     * 查询角色所拥有的权限列表
     *
     * @param roleId 角色ID
     */
    @Override
    public List<Permission> selectPermissionByRoleId(Long roleId) {
        return baseMapper.getPermissionByRoleId(roleId);
    }
}
