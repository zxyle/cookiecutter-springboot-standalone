// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Role;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserRole;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.UserRoleMapper;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserRoleService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * 用户和角色关联表 服务实现类
 */
@Slf4j
@Service
@CacheConfig(cacheNames = "UserRoleCache")
public class UserRoleServiceImpl extends ServiceImpl<UserRoleMapper, UserRole> implements IUserRoleService {

    /**
     * 删除映射关系
     *
     * @param userId 用户ID
     * @param roleId 角色ID
     */
    @Caching(evict = {
            @CacheEvict(key = "#userId + ':' + null"),
            @CacheEvict(key = "null + ':' + #roleId"),
            @CacheEvict(key = "'roles:' +#userId")
    })
    @Override
    public boolean deleteRelation(Integer userId, Integer roleId) {
        if (countRelation(userId, roleId) == 0) return true;

        return remove(buildWrapper(userId, roleId));
    }

    /**
     * 查询映射关系
     *
     * @param userId 用户ID
     * @param roleId 角色ID
     */
    @Cacheable(key = "#userId + ':' + #roleId", unless = "#result == null")
    @Override
    public List<UserRole> queryRelation(Integer userId, Integer roleId) {
        QueryWrapper<UserRole> wrapper = buildWrapper(userId, roleId);
        wrapper.select("user_id", "role_id");
        return list(wrapper);
    }

    /**
     * 统计映射关系
     *
     * @param userId 用户ID
     * @param roleId 角色ID
     */
    @Override
    public Integer countRelation(Integer userId, Integer roleId) {
        return count(buildWrapper(userId, roleId));
    }

    /**
     * 创建映射关系
     *
     * @param userId 用户ID
     * @param roleId 角色ID
     */
    @Caching(evict = {
            @CacheEvict(key = "#userId + ':' + null"),
            @CacheEvict(key = "null + ':' + #roleId"),
            @CacheEvict(key = "'roles:' + #userId")
    })
    @Override
    public boolean createRelation(Integer userId, Integer roleId) {
        if (countRelation(userId, roleId) > 0) return true;

        return save(new UserRole(userId, roleId));
    }

    /**
     * 更新用户角色关系
     *
     * @param userId  用户ID
     * @param roleIds 角色ID列表
     */
    @Transactional
    @Override
    public void updateRelation(Integer userId, List<Integer> roleIds) {
        if (CollectionUtils.isEmpty(roleIds) || userId == null || userId == 0L) {
            return;
        }

        remove(buildWrapper(userId, null));
        for (Integer roleId : roleIds) {
            createRelation(userId, roleId);
        }
    }

    // 构建wrapper
    private QueryWrapper<UserRole> buildWrapper(Integer userId, Integer roleId) {
        QueryWrapper<UserRole> wrapper = new QueryWrapper<>();
        wrapper.eq(userId != null && userId != 0, "user_id", userId);
        wrapper.eq(roleId != null && roleId != 0, "role_id", roleId);
        return wrapper;
    }

    /**
     * 根据用户ID 查询该用户所拥有的角色信息
     *
     * @param userId 用户ID
     */
    @Cacheable(key = "'roles:' + #userId", unless = "#result == null")
    @Override
    public List<Role> findRolesByUserId(Integer userId) {
        return baseMapper.findRolesByUserId(userId);
    }
}
