// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Permission;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserPermission;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.UserPermissionMapper;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserPermissionService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * 用户-权限关联 服务实现类
 */
@Slf4j
@Service
public class UserPermissionServiceImpl extends ServiceImpl<UserPermissionMapper, UserPermission> implements IUserPermissionService {

    /**
     * 删除映射关系
     *
     * @param userId       用户ID
     * @param permissionId 权限ID
     */
    @Override
    public boolean deleteRelation(Long userId, Long permissionId) {
        if (countRelation(userId, permissionId) == 0) {
            return true;
        }
        return remove(buildWrapper(userId, permissionId));
    }

    /**
     * 查询映射关系
     *
     * @param userId       用户ID
     * @param permissionId 权限ID
     */
    @Override
    public List<UserPermission> queryRelation(Long userId, Long permissionId) {
        QueryWrapper<UserPermission> wrapper = buildWrapper(userId, permissionId);
        wrapper.select("user_id, permission_id");
        return list(wrapper);
    }

    /**
     * 统计映射关系
     *
     * @param userId       用户ID
     * @param permissionId 权限ID
     */
    @Override
    public Integer countRelation(Long userId, Long permissionId) {
        return count(buildWrapper(userId, permissionId));
    }

    /**
     * 创建映射关系
     *
     * @param userId       用户ID
     * @param permissionId 权限ID
     */
    @Override
    public boolean createRelation(Long userId, Long permissionId) {
        if (countRelation(userId, permissionId) > 0) return true;

        return save(new UserPermission(userId, permissionId));
    }

    /**
     * 分页查询映射关系
     *
     * @param userId       用户ID
     * @param permissionId 权限ID
     */
    @Override
    public IPage<UserPermission> pageRelation(Long userId, Long permissionId, IPage<UserPermission> iPage) {
        QueryWrapper<UserPermission> wrapper = buildWrapper(userId, permissionId);
        wrapper.select("user_id, permission_id");
        return page(iPage, wrapper);
    }

    /**
     * 更新映射关系
     *
     * @param userId        用户ID
     * @param permissionIds 权限ID列表
     */
    @Transactional
    @Override
    public void updateRelation(Long userId, List<Long> permissionIds) {
        if (CollectionUtils.isEmpty(permissionIds) || userId == null || userId == 0L) {
            return;
        }

        // 删除旧的关联关系
        remove(buildWrapper(userId, null));
        // 创建新的关联关系
        for (Long permissionId : permissionIds) {
            createRelation(userId, permissionId);
        }
    }

    // 构建wrapper
    public QueryWrapper<UserPermission> buildWrapper(Long userId, Long permissionId) {
        QueryWrapper<UserPermission> wrapper = new QueryWrapper<>();
        wrapper.eq(userId != null && userId != 0L, "user_id", userId);
        wrapper.eq(permissionId != null && permissionId != 0L, "permission_id", permissionId);
        return wrapper;
    }

    /**
     * 查询用户直接拥有的权限代码列表
     *
     * @param userId 用户ID
     */
    @Override
    public List<Permission> selectPermissionByUserId(Long userId) {
        return baseMapper.selectPermissionByUserId(userId);
    }
}
