// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import {{ cookiecutter.basePackage }}.biz.auth.entity.PasswordHistory;
import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.enums.ChangePasswordEnum;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.PasswordHistoryMapper;
import {{ cookiecutter.basePackage }}.biz.auth.service.IPasswordHistoryService;
import {{ cookiecutter.basePackage }}.biz.sys.service.ISettingService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

/**
 * 密码历史表 服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PasswordHistoryServiceImpl extends ServiceImpl<PasswordHistoryMapper, PasswordHistory> implements IPasswordHistoryService {

    final ISettingService setting;

    /**
     * 记录密码历史
     *
     * @param user   用户
     * @param newPwd 新密码
     * @param policy 密码策略
     */
    @Async
    @Override
    public void insert(User user, String newPwd, ChangePasswordEnum policy) {
        Integer currentCount = countHistory(user.getId()) + 1;
        Integer count = setting.get("pwd.history-count").getIntValue();
        if (count != 0 && currentCount > count) {
            removeHistory(user.getId(), currentCount - count);
        }

        PasswordHistory history = new PasswordHistory();
        history.setUserId(user.getId());
        history.setAfterPwd(newPwd);
        history.setBeforePwd(user.getPwd());
        history.setEditedBy(policy.getEditedBy());
        history.setKind(policy.getKind());
        save(history);
    }

    /**
     * 获取历史记录数量
     *
     * @param userId 用户ID
     */
    public Integer countHistory(Long userId) {
        QueryWrapper<PasswordHistory> wrapper = new QueryWrapper<>();
        wrapper.eq("user_id", userId);
        return count(wrapper);
    }

    /**
     * 删除历史记录
     *
     * @param userId      用户ID
     * @param deleteCount 删除数量
     */
    public boolean removeHistory(Long userId, Integer deleteCount) {
        QueryWrapper<PasswordHistory> wrapper = new QueryWrapper<>();
        wrapper.eq("user_id", userId);
        wrapper.orderByDesc("create_time");
        wrapper.last(deleteCount != null, "limit " + deleteCount);
        return remove(wrapper);
    }

    /**
     * 清除密码历史
     *
     * @param userId 用户ID
     * @return true: 清除成功; false: 清除失败
     */
    @Override
    public boolean clear(Long userId) {
        return removeHistory(userId, null);
    }
}
