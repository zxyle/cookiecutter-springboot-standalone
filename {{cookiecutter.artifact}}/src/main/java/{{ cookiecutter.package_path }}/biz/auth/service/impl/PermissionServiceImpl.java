// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.biz.auth.service.impl;

import cn.hutool.core.lang.tree.Tree;
import cn.hutool.core.lang.tree.TreeNodeConfig;
import cn.hutool.core.lang.tree.TreeUtil;
import {{ cookiecutter.basePackage }}.biz.auth.constant.AuthConst;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Permission;
import {{ cookiecutter.basePackage }}.biz.auth.entity.Role;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserGroup;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.GroupPermissionMapper;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.PermissionMapper;
import {{ cookiecutter.basePackage }}.biz.auth.mapper.RolePermissionMapper;
import {{ cookiecutter.basePackage }}.biz.auth.service.*;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

/**
 * 权限信息 服务实现类
 */
@Service
@RequiredArgsConstructor
@CacheConfig(cacheNames = "PermissionCache")
public class PermissionServiceImpl extends ServiceImpl<PermissionMapper, Permission> implements IPermissionService {

    final IUserPermissionService userPermissionService;
    final IUserRoleService userRoleService;
    final IUserGroupService userGroupService;
    final IGroupPermissionService groupPermissionService;
    final GroupPermissionMapper groupPermissionMapper;
    final IRolePermissionService rolePermissionService;
    final RolePermissionMapper rolePermissionMapper;
    final StringRedisTemplate stringRedisTemplate;
    final IGroupRoleService groupRoleService;

    /**
     * 获取用户所有权限名称
     *
     * @param userId 用户ID
     */
    @Override
    public List<Permission> getAllPermissions(Long userId, List<Long> groupIds) {
        // 用户直接拥有的权限
        List<Permission> permissions = new ArrayList<>(userPermissionService.findPermissionsByUserId(userId));
        // 用户所在用户组拥有的权限
        if (CollectionUtils.isNotEmpty(groupIds)) {
            permissions.addAll(groupPermissionMapper.findPermissionsByGroupIds(groupIds));
        }
        return permissions.stream().distinct().collect(Collectors.toList());
    }

    /**
     * 新增权限
     *
     * @param permission 权限信息
     */
    @Override
    public boolean create(Permission permission) {
        // 设置排序
        if (permission.getParentId() != null && permission.getSort() == null) {
            Integer sort = baseMapper.selectMaxSort(permission.getParentId());
            permission.setSort(sort == null ? 1 : sort + 1);
        }
        return save(permission);
    }

    /**
     * 删除权限
     *
     * @param permissionId 权限ID
     */
    @CacheEvict(key = "#permissionId")
    @Transactional
    @Override
    public boolean delete(Long permissionId) {
        boolean s1 = groupPermissionService.deleteRelation(0L, permissionId);
        boolean s2 = rolePermissionService.deleteRelation(0L, permissionId);
        boolean s3 = userPermissionService.deleteRelation(0L, permissionId);
        boolean s4 = removeById(permissionId);
        return (s1 && s2) && (s3 && s4);
    }

    /**
     * 查询用户所有权限码和用户所有角色码
     *
     * @param userId 用户ID
     */
    @Override
    public List<String> getSecurityPermissions(Long userId) {
        // 查询用户所在用户组
        List<UserGroup> groups = userGroupService.queryRelation(userId, 0L);
        List<Long> groupIds = groups.stream().map(UserGroup::getGroupId).collect(Collectors.toList());

        // 查询用户所有角色
        List<Role> roles = userRoleService.findRolesByUserId(userId);
        if (CollectionUtils.isNotEmpty(groupIds)) {
            roles.addAll(groupRoleService.findRolesByGroupIds(groupIds));
        }
        List<Long> roleIds = roles.stream().map(Role::getId).distinct().collect(Collectors.toList());

        // 查询角色关联的权限
        List<Permission> allPermissions = new ArrayList<>(rolePermissionMapper.findPermissionsByRoleIds(roleIds));

        // 查询用户直接和用户组关联的权限
        List<Permission> permissions = new ArrayList<>(getAllPermissions(userId, groupIds));

        // 获取子权限
        List<Permission> permissionList = listAll();
        for (Permission permission : permissions) {
            allPermissions.addAll(getAllChildren(permissionList, permission.getId()));
        }
        allPermissions.addAll(permissions);

        // 组装权限码和角色码
        List<String> list = new ArrayList<>(allPermissions.size() + roles.size());
        list.addAll(allPermissions.stream().map(Permission::getCode).distinct().collect(Collectors.toList()));
        list.addAll(roles.stream().map(e -> "ROLE_" + e.getCode()).distinct().collect(Collectors.toList()));
        return list;
    }

    /**
     * 重新将新的权限码和角色码加载到redis中
     *
     * @param userId 用户ID
     */
    @Async
    @Override
    public void refreshPermissions(Long userId) {
        String key = AuthConst.KEY_PREFIX + userId;
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        // 只对已登录用户进行权限刷新
        if (Boolean.TRUE.equals(hasKey)) {
            // 将权限码和角色码存入redis
            List<String> permissions = getSecurityPermissions(userId);
            String join = String.join(AuthConst.DELIMITER, permissions);
            stringRedisTemplate.opsForValue().set(key, join, 1, TimeUnit.DAYS);
        }
    }

    /**
     * 获取持有该权限的用户
     *
     * @param code 权限码
     */
    @Override
    public List<Long> holdPermission(String code) {
        List<Long> users = new ArrayList<>();

        Set<String> keys = stringRedisTemplate.keys(AuthConst.KEY_PREFIX);
        if (null == keys)
            return users;

        for (String key : keys) {
            Long userId = Long.parseLong(key.split(":")[1]);
            String value = stringRedisTemplate.opsForValue().get(key);
            if (StringUtils.isNotBlank(value)) {
                List<String> permissions = Arrays.asList(value.split(AuthConst.DELIMITER));
                if (permissions.contains(code)) {
                    users.add(userId);
                }
            }
        }
        return users;
    }


    /**
     * 获取权限树
     *
     * @param list             待组装权限列表
     * @param rootPermissionId 根节点权限ID
     */
    @Override
    public List<Tree<Integer>> getTree(List<Permission> list, Integer rootPermissionId) {
        TreeNodeConfig config = new TreeNodeConfig();
        config.setNameKey("name");
        config.setIdKey("id");
        config.setWeightKey("sort");
        return TreeUtil.build(list, rootPermissionId, config, (object, tree) -> {
            tree.setId(object.getId().intValue());// 必填属性
            tree.setParentId(object.getParentId().intValue());// 必填属性
            tree.setName(object.getName());
            // 扩展属性 ...
            tree.putExtra("path", object.getPath());
            tree.putExtra("kind", object.getKind());
            tree.putExtra("sort", object.getSort());
            tree.putExtra("code", object.getCode());
        });
    }

    /**
     * 是否正在被使用
     *
     * @param permissionId 权限ID
     * @return true:正在被使用 false:未被使用
     */
    @Override
    public boolean isAlreadyUsed(Long permissionId) {
        QueryWrapper<Permission> wrapper = new QueryWrapper<>();
        wrapper.eq("parent_id", permissionId);
        List<Permission> permissions = list(wrapper);
        Integer userPermissions = userPermissionService.countRelation(null, permissionId);
        Integer rolePermissions = rolePermissionService.countRelation(null, permissionId);
        Integer groupPermissions = groupPermissionService.countRelation(null, permissionId);
        return userPermissions > 0 || rolePermissions > 0
                || groupPermissions > 0 || CollectionUtils.isNotEmpty(permissions);
    }

    /**
     * 递归获取所有子权限
     *
     * @param permissions 完整权限列表
     * @param rootId      根节点ID
     */
    @Override
    public List<Permission> getAllChildren(List<Permission> permissions, Long rootId) {
        List<Permission> children = new ArrayList<>();
        for (Permission permission : permissions) {
            if (permission.getParentId().equals(rootId)) {
                children.add(permission);
                children.addAll(getAllChildren(permissions, permission.getId()));
            }
        }
        return children;
    }

    public List<Permission> listAll() {
        QueryWrapper<Permission> wrapper = new QueryWrapper<>();
        wrapper.select("id", "code", "parent_id");
        return list(wrapper);
    }
}