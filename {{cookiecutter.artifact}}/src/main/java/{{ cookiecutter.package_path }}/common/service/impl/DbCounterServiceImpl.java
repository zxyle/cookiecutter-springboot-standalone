// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import {{ cookiecutter.basePackage }}.biz.sys.entity.Counter;
import {{ cookiecutter.basePackage }}.biz.sys.service.ICounterService;
import {{ cookiecutter.basePackage }}.common.service.CounterService;
import org.springframework.stereotype.Service;

/**
 * 使用数据库实现统计服务
 */
@Service
public class DbCounterServiceImpl implements CounterService {

    private static final String FORMAT = "%s:%s";

    ICounterService counterService;

    public DbCounterServiceImpl(ICounterService counterService) {
        this.counterService = counterService;
    }

    @Override
    public synchronized Long incr(String biz, String id) {
        String key = String.format(FORMAT, biz, id);
        QueryWrapper<Counter> wrapper = new QueryWrapper<>();
        wrapper.eq("biz", key);
        Counter one = counterService.getOne(wrapper);
        if (one == null) {
            one = new Counter();
            one.setBiz(key);
            one.setNumber(1L);
            counterService.save(one);
            return one.getNumber();
        }

        one.setNumber(one.getNumber() + 1);
        counterService.updateById(one);
        return one.getNumber();
    }

    @Override
    public Long get(String biz, String id) {
        String key = String.format(FORMAT, biz, id);
        QueryWrapper<Counter> wrapper = new QueryWrapper<>();
        wrapper.eq("biz", key);
        Counter one = counterService.getOne(wrapper);
        return one == null ? 0L : one.getNumber();
    }

    @Override
    public synchronized boolean clear(String biz, String id) {
        String key = String.format(FORMAT, biz, id);
        QueryWrapper<Counter> wrapper = new QueryWrapper<>();
        wrapper.eq("biz", key);
        return counterService.remove(wrapper);
    }
}
