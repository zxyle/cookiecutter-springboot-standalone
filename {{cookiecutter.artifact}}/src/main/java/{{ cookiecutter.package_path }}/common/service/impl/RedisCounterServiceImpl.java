// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.service.impl;

import {{ cookiecutter.basePackage }}.common.service.CounterService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

/**
 * Redis统计服务实现类
 */
@ConditionalOnClass(StringRedisTemplate.class)
@Service
public class RedisCounterServiceImpl implements CounterService {

    private static final String FORMAT = "%s:%s";

    @Resource
    StringRedisTemplate stringRedisTemplate;

    /**
     * 自增并获取统计次数
     *
     * @param biz 业务名
     * @param id  ID
     */
    @Override
    public Long incr(String biz, String id) {
        String key = String.format(FORMAT, biz, id);
        Long count = stringRedisTemplate.opsForValue().increment(key);
        return count != null ? count : 0;
    }

    /**
     * 获取统计次数
     *
     * @param biz 业务名
     * @param id  ID
     */
    @Override
    public Long get(String biz, String id) {
        String key = String.format(FORMAT, biz, id);
        String count = stringRedisTemplate.opsForValue().get(key);
        return StringUtils.isNumeric(count) ? Long.parseLong(count) : 0L;
    }

    /**
     * 清除浏览统计次数
     *
     * @param biz 业务名
     * @param id  ID
     */
    @Override
    public boolean clear(String biz, String id) {
        String key = String.format(FORMAT, biz, id);
        Boolean hasKey = stringRedisTemplate.hasKey(key);
        if (Boolean.FALSE.equals(hasKey)) {
            return true;
        }
        Boolean deleted = stringRedisTemplate.delete(key);
        return Boolean.TRUE.equals(deleted);
    }
}

