// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.annotation;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/**
 * 默认值注解处理器，用于给字段设置默认值，只能用于基本类型的包装类
 */
public class DefaultProcessor implements AnnotationProcessor {

    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    @Override
    public void process(Object object) {
        Class<?> clazz = object.getClass();
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            if (!field.isAnnotationPresent(Default.class))
                continue;

            field.setAccessible(true);
            try {
                Object value = field.get(object);
                if (value != null)
                    continue;

                Default annotation = field.getAnnotation(Default.class);
                String defaultValue = annotation.value();
                switch (field.getType().getSimpleName()) {
                    case "String":
                        field.set(object, defaultValue);
                        break;
                    case "Short":
                        field.set(object, Short.valueOf(defaultValue));
                        break;
                    case "Integer":
                        field.set(object, Integer.valueOf(defaultValue));
                        break;
                    case "Long":
                        field.set(object, Long.valueOf(defaultValue));
                        break;
                    case "Boolean":
                        field.set(object, Boolean.valueOf(defaultValue));
                        break;
                    case "Double":
                        field.set(object, Double.valueOf(defaultValue));
                        break;
                    case "Float":
                        field.set(object, Float.valueOf(defaultValue));
                        break;
                    case "LocalDateTime":
                        if ("now".equals(defaultValue))
                            field.set(object, LocalDateTime.now());
                        else {
                            field.set(object, LocalDateTime.parse(defaultValue, DATE_TIME_FORMATTER));
                        }
                        break;
                    case "LocalDate":
                        if ("now".equals(defaultValue))
                            field.set(object, LocalDate.now());
                        else {
                            field.set(object, LocalDate.parse(defaultValue));
                        }
                        break;
                    case "LocalTime":
                        if ("now".equals(defaultValue))
                            field.set(object, LocalTime.now());
                        else {
                            field.set(object, LocalTime.parse(defaultValue));
                        }
                        break;
                    default:
                        break;
                }
            } catch (IllegalAccessException ignored) {
            }

        }
    }

    @Override
    public boolean supports(Annotation annotation) {
        return annotation instanceof Default;
    }
}
