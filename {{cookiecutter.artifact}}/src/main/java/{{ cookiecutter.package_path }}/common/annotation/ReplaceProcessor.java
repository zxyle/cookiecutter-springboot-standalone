// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.annotation;

import org.apache.commons.lang3.StringUtils;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;

/**
 * 字符串替换注解处理器
 */
public class ReplaceProcessor implements AnnotationProcessor {

    @Override
    public void process(Object object) {
        Class<?> clazz = object.getClass();
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            if (!field.isAnnotationPresent(Replace.class))
                continue;

            field.setAccessible(true);
            try {
                Object value = field.get(object);
                if (value == null)
                    continue;

                Replace annotation = field.getAnnotation(Replace.class);
                String from = annotation.from();
                String to = annotation.to();
                if (StringUtils.isBlank(from) || StringUtils.isBlank(to))
                    continue;

                String newValue = value.toString().replace(from, to);
                field.set(object, newValue);
            } catch (IllegalAccessException ignored) {
            }
        }
    }

    @Override
    public boolean supports(Annotation annotation) {
        return annotation instanceof Replace;
    }
}
