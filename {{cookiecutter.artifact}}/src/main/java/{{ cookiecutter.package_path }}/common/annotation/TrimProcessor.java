// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.annotation;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;

/**
 * 字符串去空格注解处理器
 */
public class TrimProcessor implements AnnotationProcessor{

    @Override
    public void process(Object object) {
        Class<?> clazz = object.getClass();
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            if (!field.isAnnotationPresent(Trim.class))
                continue;

            field.setAccessible(true);
            try {
                Object value = field.get(object);
                if (value instanceof String) {
                    String str = (String) value;
                    field.set(object, str.trim());
                }
            } catch (IllegalAccessException ignored) {
            }

        }
    }

    @Override
    public boolean supports(Annotation annotation) {
        return annotation instanceof Trim;
    }
}

