// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.util;

import java.lang.reflect.Field;
import java.util.*;

/**
 * 对象转换为HashMap
 */
public final class ObjectToHashMap {

    private ObjectToHashMap() {
    }

    /**
     * 将对象转换为HashMap
     *
     * @param object 对象
     * @return HashMap
     */
    public static Map<String, String> convertObjectToHashMap(Object object) {
        Map<String, String> hashMap = new HashMap<>();
        Field[] fields = getAllFields(object);
        for (Field field : fields) {
            field.setAccessible(true);
            String fieldName = field.getName();
            Object fieldValue;
            try {
                fieldValue = field.get(object);
            } catch (IllegalAccessException e) {
                continue;
            }
            hashMap.put(fieldName, (String) fieldValue);
        }
        return hashMap;
    }

    /**
     * 获取对象的所有属性
     *
     * @param object 对象
     * @return 属性数组
     */
    public static Field[] getAllFields(Object object) {
        Class clazz = object.getClass();
        List<Field> fieldList = new ArrayList<>();
        while (clazz != null) {
            fieldList.addAll(new ArrayList<>(Arrays.asList(clazz.getDeclaredFields())));
            clazz = clazz.getSuperclass();
        }
        Field[] fields = new Field[fieldList.size()];
        fieldList.toArray(fields);
        return fields;
    }

}
