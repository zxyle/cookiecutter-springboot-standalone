// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.util;

import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;

/**
 * CIDR工具类
 */
public class CidrUtil {

    public static List<String> calculateIPList(String cidr) {
        List<String> ipList = new ArrayList<>();

        String[] parts = cidr.split("/");
        String ipAddress = parts[0];
        int prefixLength = Integer.parseInt(parts[1]);

        try {
            InetAddress startInetAddress = InetAddress.getByName(ipAddress);
            byte[] startAddressBytes = startInetAddress.getAddress();
            long startAddress = 0;
            for (byte b : startAddressBytes) {
                startAddress = startAddress << 8 | (b & 0xFF);
            }
            long endAddress = startAddress | ((1L << (32 - prefixLength)) - 1);

            for (long i = startAddress + 1; i <= endAddress - 1; i++) {
                byte[] addressBytes = new byte[]{
                        (byte) (i >> 24),
                        (byte) (i >> 16),
                        (byte) (i >> 8),
                        (byte) i
                };
                InetAddress address = InetAddress.getByAddress(addressBytes);
                ipList.add(address.getHostAddress());
            }
        } catch (Exception e) {
            // handle exception
        }

        return ipList;
    }


    public static boolean in(String ip, List<String> ipList) {
        for (String ipStr : ipList) {
            if (ipStr.equals(ip)) {
                return true;
            }

            if (ipStr.contains("/")) {
                List<String> strings = calculateIPList(ipStr);
                if (strings.contains(ip)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean notIn(String ip, List<String> ipList){
        return !in(ip, ipList);
    }

}
