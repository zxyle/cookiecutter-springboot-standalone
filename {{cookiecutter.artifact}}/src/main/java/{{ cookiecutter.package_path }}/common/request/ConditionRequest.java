// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// And git commit hash is {% gitcommit %}.

package {{ cookiecutter.basePackage }}.common.request;

import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.StringUtils;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.slf4j.Slf4j;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * 带查询条件 请求类
 */
@Slf4j
@Data
@EqualsAndHashCode(callSuper = false)
public class ConditionRequest extends BaseRequest {

    private static final Map<Class<?>, Field[]> FIELD_CACHE = new ConcurrentHashMap<>();

    /**
     * 根据请求类构建查询条件
     */
    public <T> QueryWrapper<T> toWrapper() {
        QueryWrapper<T> wrapper = new QueryWrapper<>();

        Field[] fields = FIELD_CACHE.computeIfAbsent(this.getClass(), Class::getDeclaredFields);
        Arrays.stream(fields)
                .filter(field -> field.isAnnotationPresent(QueryField.class))
                .forEach(field -> handleField(field, wrapper));
        return wrapper;
    }

    /**
     * 处理单个字段
     */
    private <T> void handleField(Field field, QueryWrapper<T> wrapper) {
        try {
            field.setAccessible(true);
            Object fieldValue = field.get(this);
            if (fieldValue == null) {
                return;
            }

            QueryField annotation = field.getAnnotation(QueryField.class);
            if (annotation.skip()) {
                return;
            }

            String fieldName = getFieldName(field, annotation);
            Operator operator = annotation.operator();
            setQueryWrapper(operator, fieldName, fieldValue, wrapper);
        } catch (Exception e) {
            if (log.isDebugEnabled()) {
                log.debug(e.getMessage());
            }
        }
    }

    /**
     * 获取字段名称
     */
    private String getFieldName(Field field, QueryField annotation) {
        String fieldName = StrUtil.toUnderlineCase(field.getName());
        if (StringUtils.isNotBlank(annotation.column())) {
            fieldName = annotation.column();
        }
        return fieldName;
    }

    /**
     * 设置查询条件
     *
     * @param operator   操作符
     * @param fieldName  字段名称
     * @param fieldValue 属性值
     * @param wrapper    查询条件
     */
    public <T> void setQueryWrapper(Operator operator, String fieldName, Object fieldValue, QueryWrapper<T> wrapper) {
        switch (operator) {
            case EQ:
                wrapper.eq(fieldName, fieldValue);
                break;
            case NE:
                wrapper.ne(fieldName, fieldValue);
                break;
            case GE:
                wrapper.ge(fieldName, fieldValue);
                break;
            case LE:
                wrapper.le(fieldName, fieldValue);
                break;
            case GT:
                wrapper.gt(fieldName, fieldValue);
                break;
            case LT:
                wrapper.lt(fieldName, fieldValue);
                break;
            case LIKE:
                wrapper.like(fieldName, fieldValue);
                break;
            case LEFT_LIKE:
                wrapper.likeLeft(fieldName, fieldValue);
                break;
            case RIGHT_LIKE:
                wrapper.likeRight(fieldName, fieldValue);
                break;
            case NOT_LIKE:
                wrapper.notLike(fieldName, fieldValue);
                break;
            case IN:
                if (fieldValue instanceof Collection) {
                    wrapper.in(fieldName, (Collection) fieldValue);
                }
                if (fieldValue instanceof Object[]) {
                    wrapper.in(fieldName, (Object[]) fieldValue);
                }
                if (fieldValue instanceof String) {
                    String[] split = fieldValue.toString().split(",");
                    wrapper.in(fieldName, split);
                }
                break;
            case NOT_IN:
                if (fieldValue instanceof Collection) {
                    wrapper.notIn(fieldName, (Collection) fieldValue);
                }
                if (fieldValue instanceof Object[]) {
                    wrapper.notIn(fieldName, (Object[]) fieldValue);
                }
                if (fieldValue instanceof String) {
                    String[] split = fieldValue.toString().split(",");
                    wrapper.notIn(fieldName, split);
                }
                break;
            case BETWEEN:
                if (fieldValue instanceof Object[]) {
                    Object[] fv = (Object[]) fieldValue;
                    wrapper.between(fieldName, fv[0], fv[1]);
                }

                if (fieldValue instanceof String) {
                    String[] split = fieldValue.toString().split(",");
                    if (split.length == 2) {
                        wrapper.between(fieldName, split[0], split[1]);
                    }
                }
                break;
            case NOT_BETWEEN:
                if (fieldValue instanceof Object[]) {
                    Object[] fv = (Object[]) fieldValue;
                    wrapper.notBetween(fieldName, fv[0], fv[1]);
                }
                if (fieldValue instanceof String) {
                    String[] split = fieldValue.toString().split(",");
                    if (split.length == 2) {
                        wrapper.notBetween(fieldName, split[0], split[1]);
                    }
                }
                break;
            case IS_NULL:
                wrapper.isNull(fieldName);
                break;
            case IS_NOT_NULL:
                wrapper.isNotNull(fieldName);
                break;
            default:
                log.warn("不支持的查询类型：{}", operator);
                break;
        }
    }
}
