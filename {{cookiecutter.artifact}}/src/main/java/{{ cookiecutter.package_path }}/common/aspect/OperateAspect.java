// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// And git commit hash is {% gitcommit %}.

package {{ cookiecutter.basePackage }}.common.aspect;

import {{ cookiecutter.basePackage }}.biz.sys.log.OperateLog;
import {{ cookiecutter.basePackage }}.biz.sys.log.OperateLogService;
import {{ cookiecutter.basePackage }}.common.response.R;
import {{ cookiecutter.basePackage }}.common.util.IpUtil;
import {{ cookiecutter.basePackage }}.common.util.JacksonUtil;
import {{ cookiecutter.basePackage }}.config.interceptor.TraceInterceptor;
import {{ cookiecutter.basePackage }}.config.security.LoginUser;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.MDC;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import {{ cookiecutter.namespace }}.servlet.http.HttpServletRequest;
import java.lang.reflect.Method;
import java.time.LocalDateTime;

/**
 * 操作日志记录切面
 */
@Slf4j
@Aspect
@Component
@RequiredArgsConstructor
public class OperateAspect {

    final OperateLogService logService;

    /**
     * 记录操作日志
     */
    @Around("@annotation({{ cookiecutter.basePackage }}.common.aspect.LogOperation)")
    public Object logOperation(ProceedingJoinPoint joinPoint) throws Throwable {
        OperateLog op = new OperateLog();

        // 获取请求IP、路径和方法
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attributes != null) {
            HttpServletRequest request = attributes.getRequest();
            op.setIp(IpUtil.getIpAddr(request));
            op.setPath(request.getRequestURI());
            op.setMethod(request.getMethod());
        }

        // 获取方法信息和参数
        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
        Method method = methodSignature.getMethod();
        Object[] args = joinPoint.getArgs();

        // 获取@LogOperation注解上的操作名称和业务名称
        LogOperation annotation = method.getAnnotation(LogOperation.class);
        String operationName = annotation.name();
        String biz = annotation.biz();

        // 记录日志信息
        op.setBiz(biz);
        op.setOperationName(operationName);
        op.setUserId(getUserId());
        op.setOperateTime(LocalDateTime.now());
        if (args.length > 0) {
            String json = JacksonUtil.serialize(args);
            op.setRequest(StringUtils.isNotBlank(json) ? StringUtils.substring(json, 0, Math.min(json.length(), 2048)) : "");
        }

        // 调用目标方法
        long startTime = System.currentTimeMillis();
        try {
            Object result = joinPoint.proceed();
            // 记录操作结果
            R<Object> response = (R) result;
            op.setSuccess(response.isSuccess());
            op.setTraceId(response.getTraceId());
            // 如果操作失败，记录失败原因
            if (!response.isSuccess()) {
                op.setResponse(StringUtils.substring(response.getMessage(), 0, Math.min(response.getMessage().length(), 1024)));
            }

            return result;
        } catch (Exception e) {
            op.setSuccess(false);
            if (StringUtils.isNotBlank(e.getMessage())) {
                op.setResponse(StringUtils.substring(e.getMessage(), 0, Math.min(e.getMessage().length(), 1024)));
            }
            log.error("操作失败: {}", op);
            throw e;
        } finally {
            op.setMeasured(System.currentTimeMillis() - startTime);
            op.setTraceId(MDC.get(TraceInterceptor.TRACE_ID));
            logService.saveLog(op);
        }
    }

    private Integer getUserId() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        LoginUser loginUser = (LoginUser) authentication.getPrincipal();
        return loginUser.getUser().getId();
    }
}

