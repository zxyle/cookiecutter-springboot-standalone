// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.controller;

import {{ cookiecutter.basePackage }}.biz.auth.entity.User;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserGroup;
import {{ cookiecutter.basePackage }}.biz.auth.entity.UserRole;
import {{ cookiecutter.basePackage }}.config.security.LoginUser;
import {{ cookiecutter.basePackage }}.biz.auth.service.IGroupService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserGroupService;
import {{ cookiecutter.basePackage }}.biz.auth.service.IUserRoleService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 权限模块通用方法
 */
@Component
public class AuthBaseController {

    @Autowired
    protected IGroupService groupService;

    @Autowired
    protected IUserGroupService userGroupService;

    @Autowired
    protected IUserRoleService userRoleService;

    /**
     * 获取当前登录用户ID
     */
    public Long getUserId() {
        return getLoggedInUser().getId();
    }

    /**
     * 获取当前登录用户信息
     */
    public User getLoggedInUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        LoginUser loginUser = (LoginUser) authentication.getPrincipal();
        return loginUser.getUser();
    }

    /**
     * 是否为平台超级管理员
     */
    public boolean isSuper() {
        User user = getLoggedInUser();
        return user.getIsSuper().equals(1);
    }

    /**
     * 获取当前登录用户名
     */
    public String getCurrentUsername() {
        User user = getLoggedInUser();
        return user.getUsername();
    }

    /**
     * 获取当前用户组以及子用户组ID
     */
    public List<Long> getSubGroupIds() {
        List<Long> longs = new ArrayList<>();
        for (Long groupId : getGroupIds()) {
            longs.addAll(groupService.getSubGroups(groupId));
        }
        return longs.stream().distinct().collect(Collectors.toList());
    }

    /**
     * 判断该用户组是否是其子用户组
     */
    public boolean isSubGroup(Long groupId) {
        List<Long> subGroups = getSubGroupIds();
        return subGroups.contains(groupId);
    }

    /**
     * 获取持有指定用户组的用户
     *
     * @param groupId 用户组ID
     */
    public List<Long> getUsersByGroup(Long groupId) {
        List<UserGroup> groups = userGroupService.queryRelation(0L, groupId);
        return groups.stream().map(UserGroup::getUserId).collect(Collectors.toList());
    }

    /**
     * 获取持有指定角色的用户
     *
     * @param roleId 角色ID
     * @return 用户ID列表
     */
    public List<Long> getUsersByRole(Long roleId) {
        List<UserRole> roles = userRoleService.queryRelation(0L, roleId);
        return roles.stream().map(UserRole::getUserId).collect(Collectors.toList());
    }

    // 查询用户所在用户组Ids
    public List<Long> getGroupIds() {
        List<UserGroup> groups = userGroupService.queryRelation(getUserId(), 0L);
        return groups.stream().map(UserGroup::getGroupId).collect(Collectors.toList());
    }

}
