// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.common.exception;

import {{ cookiecutter.basePackage }}.common.response.R;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.AccountExpiredException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.LockedException;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;


@ControllerAdvice
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    // 使用GET PUT DELETE操作不存在的数据
    @ExceptionHandler(DataNotFoundException.class)
    public ResponseEntity<R<Object>> handleDataNotFoundException(DataNotFoundException ex) {
        // Return error response with HTTP status 404
        // TODO 对一个不存在的数据进行操作，认定是一次违规操作
        return new ResponseEntity<>(R.fail(ex.getMessage()), HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<R<Object>> handleAuthException(HttpServletRequest request, Exception e, HttpServletResponse response) {
        return new ResponseEntity<>(R.fail("用户名或密码错误"), HttpStatus.UNAUTHORIZED);
    }

    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity<R<Object>> handleAccessDeniedException(HttpServletRequest request, Exception e, HttpServletResponse response) {
        return new ResponseEntity<>(R.fail("权限不足"), HttpStatus.FORBIDDEN);
    }


    // AnonymousAuthenticationToken  -> UsernamePasswordAuthenticationToken
    @ExceptionHandler(ClassCastException.class)
    public ResponseEntity<R<Object>> handleClassCastException(HttpServletRequest request, Exception e, HttpServletResponse response) {
        return new ResponseEntity<>(R.fail("登录失效，请重新登录"), HttpStatus.FORBIDDEN);
    }


    @ExceptionHandler(value = {CustomerException.class})
    public ResponseEntity<String> customerExceptionHandler(HttpServletRequest request, Exception e, HttpServletResponse response) {
        logger.error(request.getServletPath(), response.getStatus(), e.getMessage());
        int status = response.getStatus();
        return ResponseEntity.status(status).body(e.getMessage());
    }

    // 处理JSON方式 数据校验失败
    @ExceptionHandler(BindException.class)
    public ResponseEntity<R<Object>> handleValidationExceptions(BindException ex) {
        StringBuilder builder = new StringBuilder();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            builder.append(fieldName).append(":").append(errorMessage).append(";");
        });
        return new ResponseEntity<>(R.fail(builder.toString()), HttpStatus.INTERNAL_SERVER_ERROR);
    }

    // 处理表单方式 数据校验失败
    @ExceptionHandler(ConstraintViolationException.class)
    ResponseEntity<String> handleConstraintViolationException(ConstraintViolationException e) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
    }

    // 处理密码过期
    @ExceptionHandler(AccountExpiredException.class)
    ResponseEntity<R<Object>> handleAccountExpiredException(AccountExpiredException e) {
        return new ResponseEntity<>(R.fail("该账号密码已过期，请联系管理员"), HttpStatus.OK);
    }

    // 处理账号禁用
    @ExceptionHandler(DisabledException.class)
    ResponseEntity<R<Object>> handleDisabledException(DisabledException e) {
        return new ResponseEntity<>(R.fail("该账号已被停用"), HttpStatus.OK);
    }

    // 处理账号锁定
    @ExceptionHandler(LockedException.class)
    ResponseEntity<R<Object>> handleLockedException(LockedException e) {
        return new ResponseEntity<>(R.fail("该账号已被锁定"), HttpStatus.OK);
    }

    @ExceptionHandler(value = {Exception.class, NullPointerException.class, HttpMessageNotReadableException.class})
    public ResponseEntity<R<Object>> exceptionHandler(HttpServletRequest request, Exception e, HttpServletResponse response) {
        return new ResponseEntity<>(R.fail("操作失败"), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
