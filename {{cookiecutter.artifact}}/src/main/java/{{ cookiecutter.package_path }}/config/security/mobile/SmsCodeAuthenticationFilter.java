// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.config.security.mobile;

import {{ cookiecutter.basePackage }}.biz.auth.login.request.CodeLoginRequest;
import {{ cookiecutter.basePackage }}.biz.auth.mfa.AccountUtil;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

/**
 * 验证码登录过滤器
 */
public class SmsCodeAuthenticationFilter extends AbstractAuthenticationProcessingFilter {

    public SmsCodeAuthenticationFilter() {
        // 处理的验证码登录请求处理url
        super(new AntPathRequestMatcher("/auth/user/login/code", "POST"));
    }

    @Override
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException {
        if (!request.getMethod().equals("POST")) {
            throw new AuthenticationServiceException("Authentication method not supported: " + request.getMethod());
        }

        // 从请求body中获取手机号或邮箱和验证码
        CodeLoginRequest loginRequest = obtainCodeLoginRequest(request);
        String account = loginRequest.getAccount();
        String code = loginRequest.getCode();

        if (account == null) {
            account = "";
        }

        if (!(AccountUtil.isEmail(account) || AccountUtil.isMobile(account))) {
            throw new AuthenticationServiceException("账号格式错误, 请输入正确的手机号或邮箱");
        }

        if (code == null) {
            code = "";
        }

        account = account.trim();
        request.setAttribute("account", account);
        // 创建SmsCodeAuthenticationToken(未认证)
        SmsCodeAuthenticationToken authRequest = new SmsCodeAuthenticationToken(account, code);

        // 设置用户信息
        setDetails(request, authRequest);
        // 返回Authentication实例
        return this.getAuthenticationManager().authenticate(authRequest);
    }


    protected CodeLoginRequest obtainCodeLoginRequest(HttpServletRequest request) throws JsonProcessingException {
        StringBuilder stringBuilder = new StringBuilder();
        try (InputStream inputStream = request.getInputStream();
             BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream))) {
            char[] charBuffer = new char[128];
            int bytesRead;
            while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {
                stringBuilder.append(charBuffer, 0, bytesRead);
            }

        } catch (IOException e) {
            // 处理异常
        }

        String requestBody = stringBuilder.toString();
        ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.readValue(requestBody, CodeLoginRequest.class);
    }

    protected void setDetails(HttpServletRequest request, SmsCodeAuthenticationToken authRequest) {
        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));
    }
}
