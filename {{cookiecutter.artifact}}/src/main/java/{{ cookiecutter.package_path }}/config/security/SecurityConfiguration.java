// This project was generated by {{ cookiecutter.author_name }} at {% now 'local', '%Y-%m-%d %X' %}.
// The version of generator is v{{ cookiecutter._version }}.

package {{ cookiecutter.basePackage }}.config.security;

import {{ cookiecutter.basePackage }}.config.security.filter.AntiSpiderFilter;
import {{ cookiecutter.basePackage }}.config.security.filter.AclFilter;
import {{ cookiecutter.basePackage }}.config.security.filter.JwtAuthenticationTokenFilter;
import {{ cookiecutter.basePackage }}.config.security.mobile.SmsSecurityConfigurerAdapter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

/**
 * Spring Security配置
 */
@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true) // 开启方法级别的权限控制, securedEnabled = true 开启 @Secured 注解过滤权限, prePostEnabled = true 开启 @PreAuthorize 注解过滤权限
public class SecurityConfiguration {

    final AntiSpiderFilter antiSpiderFilter;
    final AclFilter aclFilter;
    final JwtAuthenticationTokenFilter jwtFilter;
    final AuthenticationEntryPoint authenticationEntryPoint;
    final AccessDeniedHandler accessDeniedHandler;
    final SmsSecurityConfigurerAdapter smsSecurityConfigurerAdapter;

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        // 关闭csrf
        http.csrf().disable()
                // 不通过session获取securityContext
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                // 对于登录接口 允许匿名访问
                .antMatchers("/auth/login/**").anonymous()
                .antMatchers("/auth/sdk/**", "/sys/dicts/**", "/sys/area/**", "/sys/file/**", "/sys/infos", "/auth/user/register",
                        "/auth/password/**", "/sys/captcha/**", "/status", "/ping", "/ua", "/headers",
                        "/getPublicKey", "/auth/login/qrcode", "/auth/login/scan", "/auth/apps/currentUser"
                ).permitAll()

                // 除上述请求 全部需要鉴权认证
                .anyRequest().authenticated()
                .and().apply(smsSecurityConfigurerAdapter);


        // 添加过滤器
        http.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);
        http.addFilterBefore(aclFilter, JwtAuthenticationTokenFilter.class);
        http.addFilterBefore(antiSpiderFilter, AclFilter.class);

        // 配置异常处理器
        http.exceptionHandling()
                // 配置认证失败处理器
                .authenticationEntryPoint(authenticationEntryPoint)
                // 配置授权失败处理器
                .accessDeniedHandler(accessDeniedHandler);

        // 允许跨域
        http.cors();
        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
}
